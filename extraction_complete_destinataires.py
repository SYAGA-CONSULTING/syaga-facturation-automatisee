#!/usr/bin/env python3
"""
Extraction COMPL√àTE et FIABLE des destinataires depuis les emails envoy√©s
Recherche approfondie pour TOUS les clients
"""

import sys
import urllib.request
import urllib.parse
import json
from datetime import datetime, timedelta
from pathlib import Path
import re

# Charger configuration Azure
def load_azure_config():
    config_path = Path.home() / '.azure_config'
    if not config_path.exists():
        raise FileNotFoundError(f"Configuration Azure AD manquante: {config_path}")
    
    config = {}
    with open(config_path, 'r') as f:
        for line in f:
            if '=' in line and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                config[key] = value
    return config

config = load_azure_config()
TENANT_ID = config['TENANT_ID']
CLIENT_ID = config['CLIENT_ID']
CLIENT_SECRET = config['CLIENT_SECRET']
USER_EMAIL = config['SENDER_EMAIL']

def get_access_token():
    """Obtenir le token d'acc√®s OAuth2"""
    token_url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    
    token_data = urllib.parse.urlencode({
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': 'https://graph.microsoft.com/.default',
        'grant_type': 'client_credentials'
    }).encode('utf-8')
    
    try:
        req = urllib.request.Request(token_url, data=token_data, method='POST')
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        with urllib.request.urlopen(req) as response:
            token_response = json.loads(response.read().decode('utf-8'))
            return token_response.get('access_token')
    except Exception as e:
        print(f"‚ùå Erreur token: {e}")
        return None

def get_all_sent_emails(months_back=6):
    """R√©cup√©rer TOUS les emails envoy√©s sur X mois"""
    access_token = get_access_token()
    if not access_token:
        return []
    
    all_emails = []
    url = f"https://graph.microsoft.com/v1.0/users/{USER_EMAIL}/mailFolders/sentitems/messages"
    
    # Date de d√©but (6 mois en arri√®re)
    date_start = (datetime.now() - timedelta(days=months_back*30)).strftime('%Y-%m-%dT00:00:00Z')
    
    # Param√®tres initiaux
    params_dict = {
        '$filter': f"sentDateTime ge {date_start}",
        '$top': '100',
        '$select': 'subject,toRecipients,sentDateTime,bodyPreview',
        '$orderby': 'sentDateTime desc'
    }
    
    next_link = url + '?' + urllib.parse.urlencode(params_dict)
    
    print(f"üîÑ R√©cup√©ration des emails envoy√©s ({months_back} derniers mois)...")
    
    # Pagination pour r√©cup√©rer TOUS les emails
    while next_link:
        try:
            req = urllib.request.Request(next_link, method='GET')
            req.add_header('Authorization', f'Bearer {access_token}')
            req.add_header('Content-Type', 'application/json')
            
            with urllib.request.urlopen(req) as response:
                data = json.loads(response.read().decode('utf-8'))
                emails = data.get('value', [])
                all_emails.extend(emails)
                
                # V√©rifier s'il y a une page suivante
                next_link = data.get('@odata.nextLink')
                
                print(f"  ‚Ä¢ {len(all_emails)} emails r√©cup√©r√©s...", end='\r')
                
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
            break
    
    print(f"\n‚úÖ Total: {len(all_emails)} emails r√©cup√©r√©s")
    return all_emails

def extract_client_emails(emails):
    """Extraire les adresses email par client"""
    
    # Dictionnaire des clients connus (avec variantes possibles)
    clients = {
        'LAA': ['laa.fr', 'LAA', 'LES AUTOMATISMES'],
        'BUQUET': ['buquet', 'BUQUET'],
        'PHARMABEST': ['pharmabest', 'PHARMABEST', 'belfonte'],
        'SEXTANT': ['sextant', 'SEXTANT'],
        'UAI': ['unairdici', 'UAI', "UN AIR D'ICI"],
        'AIXAGON': ['aixagon', 'AIXAGON'],
        'QUADRIMEX': ['quadrimex', 'QUADRIMEX'],
        'GENLOG': ['genlog', 'GENLOG'],
        'PETRAS': ['petras', 'PETRAS'],
        'AXION': ['axion', 'AXION'],
        'ANONE': ['anone', 'ANONE'],
        'FARBOS': ['farbos', 'FARBOS'],
        'ART INFO': ['art-info', 'ART INFO', 'ART INFORMATIQUE'],
        'LEFEBVRE': ['lefebvre', 'LEFEBVRE', 'MARIE-JOSE'],
        'TOUZEAU': ['touzeau', 'TOUZEAU', 'garage'],
        'PROVENCALE': ['provencale', 'PROVEN√áALE'],
        'PDB': ['port-de-bouc', 'PDB', 'PORT DE BOUC'],
        'FARSY': ['farsy', 'FARSY'],
        'CRAU': ['crau', 'CRAU']
    }
    
    client_contacts = {}
    
    for email in emails:
        subject = email.get('subject', '')
        body = email.get('bodyPreview', '')
        recipients = email.get('toRecipients', [])
        date = email.get('sentDateTime', '')[:10]
        
        # Ignorer les emails √† soi-m√™me
        to_list = []
        for r in recipients:
            addr = r['emailAddress']['address']
            if addr != USER_EMAIL:
                to_list.append({
                    'email': addr,
                    'name': r['emailAddress'].get('name', '')
                })
        
        if not to_list:  # Skip si seulement envoy√© √† soi-m√™me
            continue
        
        # Chercher quel client est concern√©
        content = (subject + ' ' + body + ' ' + str(to_list)).upper()
        
        for client_name, keywords in clients.items():
            for keyword in keywords:
                if keyword.upper() in content:
                    # Trouv√© un client !
                    if client_name not in client_contacts:
                        client_contacts[client_name] = {}
                    
                    # Ajouter les destinataires
                    for recipient in to_list:
                        email_addr = recipient['email']
                        if email_addr not in client_contacts[client_name]:
                            client_contacts[client_name][email_addr] = {
                                'name': recipient['name'],
                                'last_contact': date,
                                'subjects': []
                            }
                        
                        # Mettre √† jour la date si plus r√©cente
                        if date > client_contacts[client_name][email_addr]['last_contact']:
                            client_contacts[client_name][email_addr]['last_contact'] = date
                        
                        # Ajouter le sujet si pertinent
                        if 'facture' in subject.lower() or 'F2025' in subject:
                            client_contacts[client_name][email_addr]['subjects'].append(subject[:50])
                    
                    break  # Un client trouv√©, passer au prochain email
    
    return client_contacts

def main():
    print('üìß EXTRACTION COMPL√àTE DES DESTINATAIRES CLIENTS')
    print('='*80)
    
    # R√©cup√©rer tous les emails sur 6 mois
    emails = get_all_sent_emails(6)
    
    if not emails:
        print("‚ùå Aucun email trouv√©")
        return
    
    # Extraire les contacts clients
    client_contacts = extract_client_emails(emails)
    
    # Afficher les r√©sultats organis√©s
    print('\nüìã CONTACTS CLIENTS EXTRAITS DES EMAILS ENVOY√âS:')
    print('='*80)
    
    clients_avec_factures = ['ANONE', 'LAA', 'AXION', 'FARBOS', 'ART INFO', 
                             'LEFEBVRE', 'PETRAS', 'TOUZEAU', 'FARSY', 'PDB',
                             'UAI', 'QUADRIMEX', 'BUQUET', 'PHARMABEST', 'SEXTANT',
                             'PROVENCALE', 'GENLOG']
    
    for client in clients_avec_factures:
        print(f'\nüè¢ {client}:')
        print('-'*60)
        
        if client in client_contacts:
            for email_addr, info in client_contacts[client].items():
                name = info['name'] if info['name'] else 'N/A'
                last_contact = info['last_contact']
                print(f'  ‚Ä¢ {name:<25} ‚Üí {email_addr:<40} (dernier: {last_contact})')
                
                # Afficher si des factures ont √©t√© envoy√©es
                facture_subjects = [s for s in info['subjects'] if 'F2025' in s or 'facture' in s.lower()]
                if facture_subjects:
                    for subj in facture_subjects[:2]:  # Max 2 exemples
                        print(f'    ‚îî‚îÄ {subj}')
        else:
            print('  ‚ùì Aucun contact trouv√© dans les emails r√©cents')
    
    # R√©sum√©
    print('\n' + '='*80)
    print('üìä R√âSUM√â:')
    found = sum(1 for c in clients_avec_factures if c in client_contacts)
    print(f'‚Ä¢ Clients avec contacts trouv√©s: {found}/{len(clients_avec_factures)}')
    
    # Sauvegarder dans un fichier
    print('\nüíæ Sauvegarde des contacts...')
    with open('CONTACTS_CLIENTS_FACTURES.txt', 'w', encoding='utf-8') as f:
        f.write('CONTACTS CLIENTS POUR FACTURES\n')
        f.write('='*60 + '\n\n')
        
        for client in clients_avec_factures:
            f.write(f'{client}:\n')
            if client in client_contacts:
                for email_addr, info in client_contacts[client].items():
                    f.write(f'  ‚Ä¢ {info["name"]}: {email_addr}\n')
            else:
                f.write('  ‚Ä¢ √Ä RECHERCHER\n')
            f.write('\n')
    
    print('‚úÖ Contacts sauvegard√©s dans CONTACTS_CLIENTS_FACTURES.txt')

if __name__ == "__main__":
    main()