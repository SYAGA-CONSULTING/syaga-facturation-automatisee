#!/usr/bin/env python3
"""
TABLEAU R√âEL FINAL DES CHARGES
Bas√© uniquement sur les montants confirm√©s et v√©rifi√©s
Sans les estimations invent√©es
"""

from datetime import datetime

def calculer_charges_reelles():
    """Calcul bas√© uniquement sur les charges confirm√©es"""
    
    print("üìä TABLEAU R√âEL DES CHARGES - DONN√âES CONFIRM√âES UNIQUEMENT")
    print("=" * 70)
    print("‚úÖ = Confirm√© | ‚ùì = √Ä v√©rifier dans Qonto\n")
    
    # CHARGES CONFIRM√âES
    charges_confirmees = {
        "üßë‚Äçüíº PERSONNEL": {
            "Salaires (Hugo + Romain)": {"montant": 4200, "statut": "‚úÖ", "source": "Confirm√©"},
            "URSSAF (normal 2026)": {"montant": 2591, "statut": "‚úÖ", "source": "Calcul√© 45.4% + 22.8% TNS"}
        },
        "üè¢ IMMOBILIER": {
            "Loyer SCI QSSP": {"montant": 900, "statut": "‚úÖ", "source": "Qonto confirm√©"},
            "Loyer VillaData": {"montant": 1260, "statut": "‚úÖ", "source": "1200‚Ç¨ HT + TVA"}
        },
        "üè¶ FINANCEMENT": {
            "Pr√™t Riverbank": {"montant": 1608, "statut": "‚úÖ", "source": "Qonto confirm√©"}
        },
        "üõ°Ô∏è ASSURANCES": {
            "SwissLife Pr√©voyance": {"montant": 470, "statut": "‚úÖ", "source": "Qonto"},
            "SwissLife Retraite": {"montant": 254, "statut": "‚úÖ", "source": "Qonto"},
            "AMV (TERMIN√â)": {"montant": 0, "statut": "‚úÖ", "source": "Fini (assurance moto)"},
            "Hiscox RC Pro": {"montant": 133, "statut": "‚úÖ", "source": "RC professionnelle"},
            "SwissLife (via BP)": {"montant": 147, "statut": "‚úÖ", "source": "Banque Populaire"}
        },
        "üíª IT & CLOUD": {
            "Claude.AI Pro": {"montant": 114, "statut": "‚úÖ", "source": "102-125‚Ç¨/mois"},
            "Microsoft 365": {"montant": 91, "statut": "‚úÖ", "source": "Licences Office"},
            "GitHub": {"montant": 20, "statut": "‚úÖ", "source": "Repos priv√©s"},
            "OVH": {"montant": 30, "statut": "‚úÖ", "source": "Serveurs"},
            "Google Services": {"montant": 20, "statut": "‚úÖ", "source": "Workspace"}
        },
        "üì± T√âL√âCOM": {
            "Free Mobile": {"montant": 36, "statut": "‚úÖ", "source": "Forfaits mobiles"},
            "Free Internet": {"montant": 71, "statut": "‚úÖ", "source": "Fibre pro"}
        },
        "üè¶ FRAIS BANCAIRES": {
            "Frais Qonto": {"montant": 29, "statut": "‚úÖ", "source": "Abonnement + frais"},
            "Frais BP": {"montant": 44, "statut": "‚úÖ", "source": "Cotisations cartes"}
        },
        "üíº COMPTABILIT√â": {
            "DOUGS": {"montant": 150, "statut": "‚ùì", "source": "√Ä V√âRIFIER dans Qonto"}
        }
    }
    
    # CHARGES √Ä V√âRIFIER
    charges_a_verifier = {
        "‚ùì √Ä IDENTIFIER DANS QONTO": {
            "Carburants (si r√©current)": {"montant": 0, "statut": "‚ùì", "source": "V√©rifier fr√©quence"},
            "Autres abonnements SaaS": {"montant": 0, "statut": "‚ùì", "source": "V√©rifier Qonto"},
            "Maintenance r√©currente": {"montant": 0, "statut": "‚ùì", "source": "Si contrats"},
            "Autres charges r√©currentes": {"montant": 0, "statut": "‚ùì", "source": "√Ä identifier"}
        }
    }
    
    # Calcul et affichage
    print("üìã CHARGES CONFIRM√âES:")
    print("-" * 60)
    
    total_confirme = 0
    total_assurances = 0
    
    for categorie, items in charges_confirmees.items():
        print(f"\n{categorie}")
        sous_total = 0
        
        for nom, details in items.items():
            montant = details["montant"]
            statut = details["statut"]
            source = details["source"]
            
            if montant > 0:
                print(f"  {nom:<30} : {montant:>6}‚Ç¨ {statut} ({source})")
                sous_total += montant
                
                # Calculer total assurances sans AMV
                if "ASSURANCES" in categorie and "AMV" not in nom:
                    total_assurances += montant
            elif "AMV" in nom:
                print(f"  {nom:<30} : {montant:>6}‚Ç¨ {statut} ({source})")
        
        if sous_total > 0:
            print(f"  {'‚Üí Sous-total':<30} : {sous_total:>6}‚Ç¨")
            total_confirme += sous_total
    
    # Afficher ce qui est √† v√©rifier
    print(f"\nüìã CHARGES √Ä V√âRIFIER DANS QONTO:")
    print("-" * 60)
    for categorie, items in charges_a_verifier.items():
        print(f"\n{categorie}")
        for nom, details in items.items():
            print(f"  ‚Ä¢ {nom} {details['statut']}")
    
    # Correction assurances
    print(f"\nüí° NOTE IMPORTANTE:")
    print(f"  Total assurances SANS AMV: {total_assurances}‚Ç¨/mois")
    print(f"  (AMV termin√© = √©conomie de 397‚Ç¨/mois)")
    
    # Total final
    print(f"\n" + "=" * 60)
    print(f"üéØ TOTAL CHARGES CONFIRM√âES: {total_confirme:,}‚Ç¨/mois")
    
    # Avec objectif S√©bastien
    objectif_sebastien = 5460  # 3000‚Ç¨ net + charges
    besoin_total = total_confirme + objectif_sebastien
    
    print(f"\nüí∞ AVEC OBJECTIF S√âBASTIEN 3K‚Ç¨ NET:")
    print(f"  Charges confirm√©es: {total_confirme:,}‚Ç¨")
    print(f"  S√©bastien (3k‚Ç¨ net): {objectif_sebastien:,}‚Ç¨")
    print(f"  üéØ BESOIN TOTAL: {besoin_total:,}‚Ç¨/mois")
    
    # Potentiel septembre
    potentiel_septembre = 6775
    couverture = (potentiel_septembre / besoin_total) * 100
    deficit = besoin_total - potentiel_septembre
    
    print(f"\nüìà ANALYSE RENTABILIT√â:")
    print(f"  Potentiel septembre: {potentiel_septembre:,}‚Ç¨/mois")
    print(f"  Couverture: {couverture:.0f}%")
    print(f"  D√©ficit √† combler: {deficit:,}‚Ç¨/mois")
    
    # Comparaison avec ancien calcul (avec AMV)
    ancien_total_avec_amv = total_confirme + 397
    economie_amv = 397
    
    print(f"\nüéâ IMPACT FIN AMV:")
    print(f"  Ancien total (avec AMV): {ancien_total_avec_amv:,}‚Ç¨/mois")
    print(f"  Nouveau total (sans AMV): {total_confirme:,}‚Ç¨/mois")
    print(f"  üí∞ √âconomie AMV: {economie_amv}‚Ç¨/mois ({economie_amv*12:,}‚Ç¨/an)")
    
    print(f"\n‚ö†Ô∏è POINTS √Ä CLARIFIER:")
    print("  1. Montant exact DOUGS dans Qonto")
    print("  2. Identifier autres charges r√©currentes √©ventuelles")
    print("  3. V√©rifier si carburants/d√©placements sont r√©currents")
    print("  4. Chercher autres abonnements SaaS oubli√©s")
    
    print(f"\nüìÖ Tableau r√©el g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    
    return {
        'total_confirme': total_confirme,
        'besoin_total': besoin_total,
        'deficit': deficit,
        'economie_amv': economie_amv
    }

if __name__ == "__main__":
    resultat = calculer_charges_reelles()