#!/usr/bin/env python3
"""
D√âTAIL COMPLET DE TOUTES LES CHARGES
Analyse ligne par ligne pour identifier les anomalies
"""

import subprocess
import json
from collections import defaultdict
from datetime import datetime

class DetailChargesAnalyzer:
    def __init__(self):
        self.qonto_auth = "syaga-consulting-5172:06f55a4b41d0"
        self.qonto_iban = "FR7616958000018809313999064"
        
    def get_all_charges(self):
        """R√©cup√®re TOUTES les charges des 3 derniers mois"""
        print("üîç EXTRACTION D√âTAILL√âE DE TOUTES LES CHARGES")
        print("="*70)
        print("P√©riode : Mai-Juillet 2025\n")
        
        # R√©cup√©rer transactions Qonto
        cmd = [
            'curl', '-s',
            '-H', f'Authorization: {self.qonto_auth}',
            f'https://thirdparty.qonto.com/v2/transactions?status=completed&iban={self.qonto_iban}&per_page=100'
        ]
        
        all_transactions = []
        
        try:
            # R√©cup√©rer 3 pages (300 transactions)
            for page in range(1, 4):
                page_cmd = cmd[:4] + [cmd[4] + f'&page={page}']
                result = subprocess.run(page_cmd, capture_output=True, text=True)
                data = json.loads(result.stdout)
                all_transactions.extend(data.get('transactions', []))
            
            print(f"‚úÖ {len(all_transactions)} transactions r√©cup√©r√©es\n")
            
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            return []
        
        # Filtrer Mai-Juillet 2025 et d√©bits uniquement
        charges = []
        for tx in all_transactions:
            date = tx.get('settled_at', '')
            if date >= '2025-05-01' and date < '2025-08-01' and tx.get('side') == 'debit':
                charges.append(tx)
        
        print(f"üìä {len(charges)} charges identifi√©es pour Mai-Juillet 2025\n")
        return charges
    
    def categorize_detailed(self, charges):
        """Cat√©gorisation tr√®s d√©taill√©e"""
        
        categories_detail = {
            'SALAIRES_EMPLOYES': {
                'items': [],
                'patterns': ['hugo joucla', 'romain bastien', 'loan roulph']
            },
            'DIRIGEANT': {
                'items': [],
                'patterns': ['sebastien questier', 's√©bastien questier']
            },
            'EX_EMPLOYE': {
                'items': [],
                'patterns': ['pierre questier']
            },
            'URSSAF': {
                'items': [],
                'patterns': ['urssaf']
            },
            'IMPOTS': {
                'items': [],
                'patterns': ['dgfip', 'impot', 'taxe']
            },
            'LOYER_SCI': {
                'items': [],
                'patterns': ['sci qssp', 'sci']
            },
            'LOYER_VILLADATA': {
                'items': [],
                'patterns': ['villadata']
            },
            'PRET_RIVERBANK': {
                'items': [],
                'patterns': ['riverbank', 'remboursement pret']
            },
            'COMPTABLE': {
                'items': [],
                'patterns': ['nobelia']
            },
            'ASSURANCES': {
                'items': [],
                'patterns': ['swisslife', 'hiscox', 'a m v', 'assurance']
            },
            'VIREMENTS_INTERNES': {
                'items': [],
                'patterns': ['syaga consulting bppc', 'virement interne']
            },
            'TELECOM': {
                'items': [],
                'patterns': ['free', 'orange', 'sfr', 'bouygues']
            },
            'MICROSOFT': {
                'items': [],
                'patterns': ['microsoft']
            },
            'SERVICES_IT': {
                'items': [],
                'patterns': ['ovh', 'google', 'claude', 'openai', 'github']
            },
            'ACHATS_DIVERS': {
                'items': [],
                'patterns': ['amazon', 'cdiscount', 'fnac']
            },
            'AUTRES': {
                'items': []
            }
        }
        
        # Cat√©goriser chaque charge
        for charge in charges:
            label = charge.get('label', '').lower()
            amount = abs(charge.get('amount', 0))
            date = charge.get('settled_at', '')[:10]
            
            categorized = False
            
            for cat_name, cat_data in categories_detail.items():
                if cat_name == 'AUTRES':
                    continue
                    
                for pattern in cat_data.get('patterns', []):
                    if pattern in label:
                        cat_data['items'].append({
                            'date': date,
                            'amount': amount,
                            'label': charge.get('label', '')
                        })
                        categorized = True
                        break
                
                if categorized:
                    break
            
            if not categorized:
                categories_detail['AUTRES']['items'].append({
                    'date': date,
                    'amount': amount,
                    'label': charge.get('label', '')
                })
        
        return categories_detail
    
    def display_detailed_breakdown(self, categories):
        """Affiche le d√©tail complet par cat√©gorie"""
        
        print("üí∞ D√âTAIL COMPLET DES CHARGES PAR CAT√âGORIE")
        print("="*70)
        
        grand_total = 0
        summary = {}
        
        # Afficher chaque cat√©gorie
        for cat_name, cat_data in categories.items():
            if not cat_data['items']:
                continue
            
            total = sum(item['amount'] for item in cat_data['items'])
            monthly = total / 3  # Sur 3 mois
            
            # Formater le nom de cat√©gorie
            display_name = cat_name.replace('_', ' ')
            
            print(f"\n{'='*60}")
            print(f"üìÅ {display_name}")
            print(f"{'='*60}")
            print(f"Total 3 mois: {total:,.2f}‚Ç¨")
            print(f"Moyenne mensuelle: {monthly:,.2f}‚Ç¨")
            print(f"Nombre de transactions: {len(cat_data['items'])}")
            
            # D√©tail des transactions
            if len(cat_data['items']) <= 10:
                # Si peu de transactions, tout afficher
                print("\nD√©tail:")
                for item in sorted(cat_data['items'], key=lambda x: x['date']):
                    print(f"  {item['date']}: {item['amount']:8,.2f}‚Ç¨ - {item['label']}")
            else:
                # Si beaucoup, afficher √©chantillon
                print("\n√âchantillon (5 plus grosses):")
                sorted_items = sorted(cat_data['items'], key=lambda x: x['amount'], reverse=True)
                for item in sorted_items[:5]:
                    print(f"  {item['date']}: {item['amount']:8,.2f}‚Ç¨ - {item['label']}")
            
            summary[display_name] = monthly
            grand_total += total
        
        # R√©sum√© final
        print("\n" + "="*70)
        print("üìä R√âSUM√â MENSUEL")
        print("="*70)
        
        # Trier par montant d√©croissant
        for cat_name, monthly in sorted(summary.items(), key=lambda x: x[1], reverse=True):
            if monthly > 10:  # Ignorer les montants n√©gligeables
                print(f"{cat_name:30} : {monthly:8,.0f}‚Ç¨/mois")
        
        print("-" * 50)
        print(f"{'TOTAL TOUTES CHARGES':30} : {grand_total/3:8,.0f}‚Ç¨/mois")
        
        # Identifier les anomalies
        print("\n" + "="*70)
        print("‚ö†Ô∏è ANOMALIES IDENTIFI√âES")
        print("="*70)
        
        if 'VIREMENTS INTERNES' in summary:
            print(f"‚ùå Virements internes compt√©s comme charges: {summary['VIREMENTS INTERNES']:.0f}‚Ç¨/mois")
        
        if 'EX EMPLOYE' in summary:
            print(f"‚ùå Pierre Questier (parti fin mai): {summary['EX EMPLOYE']:.0f}‚Ç¨/mois")
        
        if 'DIRIGEANT' in summary and summary['DIRIGEANT'] > 1000:
            print(f"‚ö†Ô∏è V√©rifier double comptage S√©bastien: {summary['DIRIGEANT']:.0f}‚Ç¨/mois")
        
        # Charges r√©elles apr√®s corrections
        charges_reelles = grand_total / 3
        
        # Soustraire les anomalies
        corrections = 0
        if 'VIREMENTS INTERNES' in summary:
            corrections += summary['VIREMENTS INTERNES']
        if 'EX EMPLOYE' in summary:
            corrections += summary['EX EMPLOYE']
        if 'DIRIGEANT' in summary:
            corrections += summary['DIRIGEANT']  # √Ä v√©rifier si c'est votre salaire ou non
        
        charges_corrigees = charges_reelles - corrections
        
        print("\n" + "="*70)
        print("üíé CHARGES R√âELLES APR√àS CORRECTIONS")
        print("="*70)
        print(f"Total brut : {charges_reelles:,.0f}‚Ç¨/mois")
        print(f"Corrections : -{corrections:,.0f}‚Ç¨/mois")
        print(f"TOTAL NET : {charges_corrigees:,.0f}‚Ç¨/mois")
        
        return summary

def main():
    analyzer = DetailChargesAnalyzer()
    
    # R√©cup√©rer toutes les charges
    charges = analyzer.get_all_charges()
    
    if not charges:
        print("‚ùå Impossible de r√©cup√©rer les charges")
        return
    
    # Cat√©goriser en d√©tail
    categories = analyzer.categorize_detailed(charges)
    
    # Afficher le d√©tail complet
    summary = analyzer.display_detailed_breakdown(categories)
    
    # Message final
    print("\n" + "="*70)
    print("üí° NOTES IMPORTANTES:")
    print("  ‚Ä¢ Les virements internes ne sont PAS des charges")
    print("  ‚Ä¢ Pierre Questier a quitt√© fin mai (paiement de sortie)")
    print("  ‚Ä¢ V√©rifier si les paiements √† S√©bastien sont votre r√©mun√©ration")
    print("  ‚Ä¢ La cat√©gorie AUTRES n√©cessite une revue d√©taill√©e")
    print("="*70)

if __name__ == "__main__":
    main()