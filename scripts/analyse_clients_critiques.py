#!/usr/bin/env python3
"""
Analyse des clients critiques et actions requises
BasÃ© sur CLAUDE.md et donnÃ©es de facturation
"""

import sqlite3
from datetime import datetime, timedelta
from collections import defaultdict

def analyser_clients_critiques():
    """Analyse les clients avec statuts critiques et gÃ©nÃ¨re les actions"""
    
    # Statuts clients selon CLAUDE.md
    clients_statuts = {
        'LAA': {
            'ca': '18.5Mâ‚¬',
            'statut': 'ðŸŸ¡ ATTENTION',
            'probleme': 'GPU RDS en attente',
            'action': 'Validation Bruno Meunier urgente',
            'contact': 'bm@laa.fr'
        },
        'LA PROVENCALE': {
            'ca': '60Mâ‚¬',
            'statut': 'ðŸ”´ CRITIQUE',
            'probleme': 'Gouvernance dÃ©fensive',
            'action': 'PrÃ©sentation DG urgente',
            'contact': 'christophe.marteau@provencale.com'
        },
        'PETRAS': {
            'ca': '3.2Mâ‚¬',
            'statut': 'ðŸŸ¢ OK',
            'probleme': None,
            'action': 'Maintenance continue',
            'contact': 'dominique.petras@petras.fr'
        },
        'BUQUET': {
            'ca': '2.9Mâ‚¬',
            'statut': 'ðŸ”´ CRITIQUE',
            'probleme': 'RE2020 non conforme',
            'action': 'Rattrapage 116kâ‚¬/an',
            'contact': 'm.hinault@buquet-sas.fr'
        },
        'PHARMABEST': {
            'ca': 'N/A',
            'statut': 'ðŸŸ¢ OK',
            'probleme': None,
            'action': 'SharePoint/M365 en cours',
            'contact': 'anthony.cimo@pharmabest.com'
        },
        'UAI': {
            'ca': 'N/A',
            'statut': 'ðŸŸ¡ OPPORTUNITÃ‰',
            'probleme': 'Performance SQL X3',
            'action': 'Devis 25.5kâ‚¬ Ã  valider',
            'contact': 'FrÃ©dÃ©ric BEAUTE'
        }
    }
    
    conn = sqlite3.connect('../data/factures_cache.db')
    cursor = conn.cursor()
    
    print("=" * 80)
    print("ANALYSE CLIENTS CRITIQUES - ACTIONS REQUISES")
    print("=" * 80)
    print(f"Date: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print()
    
    # Analyse par statut critique
    print("ðŸ”´ CLIENTS CRITIQUES - ACTION IMMÃ‰DIATE")
    print("-" * 40)
    for client, info in clients_statuts.items():
        if info['statut'].startswith('ðŸ”´'):
            print(f"\n{client} (CA: {info['ca']})")
            print(f"  ProblÃ¨me: {info['probleme']}")
            print(f"  ACTION: {info['action']}")
            print(f"  Contact: {info['contact']}")
            
            # VÃ©rifier la facturation rÃ©cente
            cursor.execute("""
                SELECT COUNT(*), SUM(total_ht), MAX(date_facture)
                FROM factures
                WHERE client_nom LIKE ? AND date_facture >= '2025-01-01'
            """, (f'%{client}%',))
            nb, ca_2025, derniere = cursor.fetchone()
            if nb and nb > 0:
                print(f"  Facturation 2025: {nb} factures, {ca_2025:,.2f}â‚¬ HT")
                print(f"  DerniÃ¨re facture: {derniere}")
    
    print("\n" + "=" * 40)
    print("ðŸŸ¡ CLIENTS EN ATTENTE - SUIVI REQUIS")
    print("-" * 40)
    for client, info in clients_statuts.items():
        if info['statut'].startswith('ðŸŸ¡'):
            print(f"\n{client} (CA: {info['ca']})")
            print(f"  Situation: {info['probleme']}")
            print(f"  ACTION: {info['action']}")
            print(f"  Contact: {info['contact']}")
            
            cursor.execute("""
                SELECT COUNT(*), SUM(total_ht), MAX(date_facture)
                FROM factures
                WHERE client_nom LIKE ? AND date_facture >= '2025-01-01'
            """, (f'%{client}%',))
            nb, ca_2025, derniere = cursor.fetchone()
            if nb and nb > 0:
                print(f"  Facturation 2025: {nb} factures, {ca_2025 or 0:,.2f}â‚¬ HT")
    
    # Analyse des retards de paiement potentiels
    print("\n" + "=" * 40)
    print("ðŸ“Š ANALYSE FACTURATION - RETARDS POTENTIELS")
    print("-" * 40)
    
    # Factures de plus de 30 jours sans paiement supposÃ©
    date_limite = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
    cursor.execute("""
        SELECT client_nom, COUNT(*), SUM(total_ht)
        FROM factures
        WHERE date_facture < ? AND total_ht > 0
        AND date_facture >= '2025-01-01'
        GROUP BY client_nom
        HAVING SUM(total_ht) > 1000
        ORDER BY SUM(total_ht) DESC
    """, (date_limite,))
    
    retards = cursor.fetchall()
    if retards:
        print("\nFactures > 30 jours (potentiellement impayÃ©es):")
        for client, nb, montant in retards:
            print(f"  {client:20}: {nb} factures, {montant:,.2f}â‚¬ HT")
    else:
        print("\nâœ… Aucun retard significatif dÃ©tectÃ©")
    
    # Projections et opportunitÃ©s
    print("\n" + "=" * 40)
    print("ðŸ’° OPPORTUNITÃ‰S & PROJECTIONS")
    print("-" * 40)
    
    # Calcul du CA projetÃ©
    cursor.execute("""
        SELECT SUM(total_ht) FROM factures
        WHERE date_facture >= '2025-01-01' AND date_facture <= '2025-07-31'
    """)
    ca_7_mois = cursor.fetchone()[0] or 0
    ca_mensuel_moyen = ca_7_mois / 7 if ca_7_mois > 0 else 0
    ca_projete_annuel = ca_mensuel_moyen * 12
    
    print(f"\nCA rÃ©alisÃ© Jan-Juil 2025: {ca_7_mois:,.2f}â‚¬ HT")
    print(f"CA mensuel moyen: {ca_mensuel_moyen:,.2f}â‚¬ HT")
    print(f"CA projetÃ© 2025: {ca_projete_annuel:,.2f}â‚¬ HT")
    
    print("\nðŸŽ¯ OPPORTUNITÃ‰S IDENTIFIÃ‰ES:")
    print("1. UAI - Devis optimisation SQL X3: 25,500â‚¬ HT (ROI 3x)")
    print("2. BUQUET - Rattrapage RE2020: 116,000â‚¬/an potentiel")
    print("3. LAA - GPU RDS: Impact 18.5Mâ‚¬ de CA client")
    print("4. PHARMABEST - Extension M365: 60,000â‚¬/an rÃ©current")
    
    # Recommandations
    print("\n" + "=" * 40)
    print("ðŸ“‹ PLAN D'ACTION RECOMMANDÃ‰")
    print("-" * 40)
    print("""
1. IMMÃ‰DIAT (Cette semaine):
   âœ“ Envoyer email rÃ©cap facturation juillet Ã  sebastien.questier@syaga.fr
   âœ“ Relancer Bruno Meunier (LAA) pour validation GPU RDS
   âœ“ PrÃ©parer prÃ©sentation gouvernance pour La ProvenÃ§ale
   
2. COURT TERME (AoÃ»t 2025):
   âœ“ Valider devis UAI avec FrÃ©dÃ©ric BeautÃ©
   âœ“ Planifier intervention Buquet RE2020
   âœ“ DÃ©ployer phase 2 Pharmabest M365
   
3. OPTIMISATIONS PROCESS:
   âœ“ Automatiser extraction donnÃ©es factures PDF
   âœ“ IntÃ©grer API Clockify pour facturation temps rÃ©el
   âœ“ Dashboard client avec alertes retards
   
4. SUIVI TRÃ‰SORERIE:
   âœ“ Relances automatiques J+30
   âœ“ Reporting hebdomadaire CA/encaissements
   âœ“ PrÃ©visions de trÃ©sorerie sur 3 mois glissants
    """)
    
    conn.close()
    
    print("\n" + "=" * 80)
    print("FIN DU RAPPORT")
    print("=" * 80)

if __name__ == "__main__":
    analyser_clients_critiques()