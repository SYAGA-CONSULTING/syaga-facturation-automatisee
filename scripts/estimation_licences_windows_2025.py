#!/usr/bin/env python3
"""
ESTIMATION CO√õT LICENCES WINDOWS 2025
Vendues mais pas encore achet√©es - Impact tr√©sorerie
"""

from datetime import datetime

def main():
    print("\n" + "="*80)
    print("       üí∞ ESTIMATION CO√õT LICENCES WINDOWS 2025")
    print("           Vendues en 2024 - √Ä acheter maintenant")
    print("="*80)
    
    # Profils clients identifi√©s
    clients_profiles = {
        "PROVEN√áALE": {
            "secteur": "ETI Manufacturi√®re",
            "ca": "59,5M‚Ç¨",
            "effectif": 200,
            "serveurs_estimes": 8,  # HOST01-07 + backup
            "infrastructure": "Hyper-V, migration Windows 2022",
            "budget_it": "275k‚Ç¨/an"
        },
        "LAA": {
            "secteur": "Automatismes industriels",
            "ca": "18,5M‚Ç¨", 
            "effectif": 35,
            "serveurs_estimes": 4,  # Environnement SalesLogix + prod
            "infrastructure": "Windows Server, SalesLogix, SQL",
            "budget_it": "23k‚Ç¨/an"
        },
        "PETRAS": {
            "secteur": "√âquipements hydrauliques", 
            "ca": "3,2M‚Ç¨",
            "effectif": 25,
            "serveurs_estimes": 2,  # Serveur principal + backup
            "infrastructure": "PME, infrastructure basique",
            "budget_it": "10k‚Ç¨/an"
        }
    }
    
    # Tarifs licences Windows 2025 (estimation march√©)
    tarifs_licences = {
        "windows_server_2025_standard": {
            "prix_unitaire": 950,  # ‚Ç¨HT par licence
            "description": "Windows Server 2025 Standard (16 c≈ìurs)"
        },
        "windows_server_2025_datacenter": {
            "prix_unitaire": 6800,  # ‚Ç¨HT par licence
            "description": "Windows Server 2025 Datacenter (16 c≈ìurs)"
        },
        "windows_client_2025_pro": {
            "prix_unitaire": 280,  # ‚Ç¨HT par licence
            "description": "Windows 11 Pro 2025"
        },
        "sql_server_2025_std": {
            "prix_unitaire": 3500,  # ‚Ç¨HT par licence
            "description": "SQL Server 2025 Standard"
        }
    }
    
    print("\nüìä PROFILS CLIENTS")
    print("-" * 60)
    
    estimations = {}
    
    for client, profile in clients_profiles.items():
        print(f"\nüè¢ {client}")
        print(f"   Secteur: {profile['secteur']}")
        print(f"   CA: {profile['ca']} | Effectif: {profile['effectif']} personnes")
        print(f"   Serveurs estim√©s: {profile['serveurs_estimes']}")
        print(f"   Budget IT: {profile['budget_it']}")
        
        # Estimation licences selon profil
        if client == "PROVEN√áALE":
            # ETI avec infrastructure complexe
            licences = {
                "Windows Server 2025 Standard": 6,  # 6 hosts physiques  
                "Windows Server 2025 Datacenter": 2,  # 2 hosts virtualis√©s
                "Windows 11 Pro 2025": 50,  # 25% parc √† renouveler
                "SQL Server 2025 Standard": 2  # 2 instances
            }
        elif client == "LAA":
            # PME industrielle SalesLogix
            licences = {
                "Windows Server 2025 Standard": 3,  # Prod + dev + backup
                "Windows 11 Pro 2025": 20,  # ~50% parc
                "SQL Server 2025 Standard": 1  # SalesLogix DB
            }
        else:  # PETRAS
            # Petite PME
            licences = {
                "Windows Server 2025 Standard": 2,  # Principal + backup
                "Windows 11 Pro 2025": 10  # ~40% parc
            }
        
        # Calculer co√ªts
        total_ht = 0
        print(f"\n   üí° Estimation licences vendues:")
        
        for licence_type, quantite in licences.items():
            if "Windows Server" in licence_type and "Standard" in licence_type:
                prix_unit = tarifs_licences["windows_server_2025_standard"]["prix_unitaire"]
            elif "Windows Server" in licence_type and "Datacenter" in licence_type:
                prix_unit = tarifs_licences["windows_server_2025_datacenter"]["prix_unitaire"]
            elif "Windows 11" in licence_type:
                prix_unit = tarifs_licences["windows_client_2025_pro"]["prix_unitaire"]
            elif "SQL Server" in licence_type:
                prix_unit = tarifs_licences["sql_server_2025_std"]["prix_unitaire"]
            
            sous_total = quantite * prix_unit
            total_ht += sous_total
            print(f"     ‚Ä¢ {licence_type}: {quantite}x {prix_unit}‚Ç¨ = {sous_total:,}‚Ç¨")
        
        tva = total_ht * 0.20
        total_ttc = total_ht + tva
        
        estimations[client] = {
            "total_ht": total_ht,
            "tva": tva,
            "total_ttc": total_ttc
        }
        
        print(f"\n   üí∞ ESTIMATION CO√õT:")
        print(f"     Total HT  : {total_ht:,}‚Ç¨")
        print(f"     TVA 20%   : {tva:,}‚Ç¨")
        print(f"     Total TTC : {total_ttc:,}‚Ç¨")
    
    # SYNTH√àSE GLOBALE
    print("\n" + "="*80)
    print("üìä SYNTH√àSE - IMPACT TR√âSORERIE")
    print("="*80)
    
    total_global_ht = sum(e["total_ht"] for e in estimations.values())
    total_global_tva = sum(e["tva"] for e in estimations.values())
    total_global_ttc = sum(e["total_ttc"] for e in estimations.values())
    
    print(f"\nPAR CLIENT:")
    for client, montants in estimations.items():
        print(f"  {client:<12}: {montants['total_ht']:>8,}‚Ç¨ HT ({montants['total_ttc']:>8,}‚Ç¨ TTC)")
    
    print(f"\n" + "-"*50)
    print(f"  {'TOTAL':<12}: {total_global_ht:>8,}‚Ç¨ HT ({total_global_ttc:>8,}‚Ç¨ TTC)")
    
    # Impact sur analyse financi√®re pr√©c√©dente
    print(f"\nüìâ IMPACT SUR ANALYSE FINANCI√àRE:")
    print(f"   Exc√©dent apparent pr√©c√©dent : +17,876‚Ç¨/an")
    print(f"   Co√ªt licences √† acheter     : -{total_global_ht:,}‚Ç¨")
    print(f"   " + "="*40)
    
    impact_net = 17876 - total_global_ht
    if impact_net > 0:
        print(f"   RESTE EXC√âDENT             : +{impact_net:,}‚Ç¨")
    else:
        print(f"   DEVIENT D√âFICIT            : {impact_net:,}‚Ç¨")
    
    print(f"\n‚ö†Ô∏è  DETTE FOURNISSEUR √Ä PROVISIONNER:")
    print(f"   Microsoft/Distributeur     : {total_global_ht:,}‚Ç¨ HT")
    print(f"   TVA r√©cup√©rable            : {total_global_tva:,}‚Ç¨")
    print(f"   Impact tr√©sorerie nette    : -{total_global_ht:,}‚Ç¨")
    
    # Recommandations
    print(f"\nüí° RECOMMANDATIONS:")
    print(f"""
    1. N√âGOCIATION PAIEMENT:
       ‚Ä¢ √âtaler sur 3 mois : {total_global_ttc/3:,.0f}‚Ç¨/mois
       ‚Ä¢ N√©gocier 60 jours au lieu de 30
       ‚Ä¢ Demander remise volume (3 clients)
    
    2. FACTURATION CLIENTS:
       ‚Ä¢ V√©rifier encaissement d√©j√† fait en 2024
       ‚Ä¢ Si pas encore factur√© : facturer imm√©diatement
       ‚Ä¢ Appliquer marge habituelle sur co√ªt d'achat
    
    3. TR√âSORERIE:
       ‚Ä¢ Provisionner {total_global_ht:,}‚Ç¨ d'ici fin ao√ªt
       ‚Ä¢ Impact sur projection septembre
       ‚Ä¢ √âvaluer besoin financement pont si n√©cessaire
    """)
    
    return total_global_ht, total_global_ttc

if __name__ == "__main__":
    cout_ht, cout_ttc = main()
    
    print("\n" + "="*80)
    print("‚úÖ ESTIMATION TERMIN√âE")
    print("="*80)
    print(f"""
    DETTE √Ä PROVISIONNER: {cout_ht:,}‚Ç¨ HT
    IMPACT TR√âSORERIE: -{cout_ht:,}‚Ç¨
    
    Cette analyse doit √™tre valid√©e avec les montants r√©els
    des factures de vente avant mise √† jour d√©finitive.
    """)
    print(f"Analyse g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")