#!/usr/bin/env python3
"""
RECHERCHE DES VRAIES FACTURES : Emails avec PDF F2025xxxx.pdf en pi√®ce jointe
"""

import sys
import urllib.request
import urllib.parse
import json
from datetime import datetime, timedelta
from pathlib import Path
import re

# Charger configuration Azure
def load_azure_config():
    config_path = Path.home() / '.azure_config'
    if not config_path.exists():
        raise FileNotFoundError(f"Configuration Azure AD manquante: {config_path}")
    
    config = {}
    with open(config_path, 'r') as f:
        for line in f:
            if '=' in line and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                config[key] = value
    return config

config = load_azure_config()
TENANT_ID = config['TENANT_ID']
CLIENT_ID = config['CLIENT_ID']
CLIENT_SECRET = config['CLIENT_SECRET']
USER_EMAIL = config['SENDER_EMAIL']

def get_access_token():
    """Obtenir le token d'acc√®s OAuth2"""
    token_url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    
    token_data = urllib.parse.urlencode({
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': 'https://graph.microsoft.com/.default',
        'grant_type': 'client_credentials'
    }).encode('utf-8')
    
    try:
        req = urllib.request.Request(token_url, data=token_data, method='POST')
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        with urllib.request.urlopen(req) as response:
            token_response = json.loads(response.read().decode('utf-8'))
            return token_response.get('access_token')
    except Exception as e:
        print(f"‚ùå Erreur token: {e}")
        return None

def get_emails_with_attachments():
    """R√©cup√©rer UNIQUEMENT les emails envoy√©s avec pi√®ces jointes"""
    access_token = get_access_token()
    if not access_token:
        return []
    
    # Rechercher les emails envoy√©s avec pi√®ces jointes
    url = f"https://graph.microsoft.com/v1.0/users/{USER_EMAIL}/mailFolders/sentitems/messages"
    
    # Param√®tres √©tendus pour inclure les pi√®ces jointes
    params_dict = {
        '$top': '500',
        '$select': 'subject,toRecipients,sentDateTime,hasAttachments',
        '$expand': 'attachments',
        '$orderby': 'sentDateTime desc'
    }
    
    params = '?' + urllib.parse.urlencode(params_dict)
    
    try:
        print("üîÑ R√©cup√©ration des emails avec pi√®ces jointes...")
        req = urllib.request.Request(url + params, method='GET')
        req.add_header('Authorization', f'Bearer {access_token}')
        req.add_header('Content-Type', 'application/json')
        
        with urllib.request.urlopen(req) as response:
            data = json.loads(response.read().decode('utf-8'))
            return data.get('value', [])
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return []

def main():
    print('üîç RECHERCHE DES FACTURES PDF F2025 DANS LES PI√àCES JOINTES')
    print('='*80)
    
    # Les 9 factures √† v√©rifier
    factures_a_verifier = {
        'F20250120': {'client': 'ANONE', 'montant': 300, 'email': 'viet.nguyen@anone.fr'},
        'F20250731': {'client': 'LAA', 'montant': 1800, 'email': 'alleaume@laa.fr'},
        'F20250733': {'client': 'LAA', 'montant': 700, 'email': 'alleaume@laa.fr'},
        'F20250734': {'client': 'AXION', 'montant': 700, 'email': 'n.diaz@axion-informatique.fr'},
        'F20250735': {'client': 'ART INFO', 'montant': 200, 'email': 'h.sarda@artinformatique.net'},
        'F20250736': {'client': 'FARBOS', 'montant': 150, 'email': 'n.diaz@axion-informatique.fr'},
        'F20250737': {'client': 'LEFEBVRE', 'montant': 360, 'email': 'mjlefebvre@selasu-mjl-avocats.com'},
        'F20250738': {'client': 'PETRAS', 'montant': 600, 'email': 'lauriane.petras@petras.fr'},
        'F20250744': {'client': 'TOUZEAU', 'montant': 150, 'email': 'commercial.diaboliqbike@gmail.com'}
    }
    
    # R√©cup√©rer les emails avec pi√®ces jointes
    emails = get_emails_with_attachments()
    
    if not emails:
        print("‚ùå Aucun email avec pi√®ces jointes trouv√©")
        return
    
    print(f"‚úÖ {len(emails)} emails avec pi√®ces jointes trouv√©s\n")
    
    # Analyser les pi√®ces jointes
    print('üìé ANALYSE DES PI√àCES JOINTES PDF:')
    print('-'*80)
    
    factures_pdf_trouvees = {}
    tous_pdf_f2025 = []
    
    for email in emails:
        subject = email.get('subject', '')
        recipients = email.get('toRecipients', [])
        date = email.get('sentDateTime', '')[:10]
        attachments = email.get('attachments', [])
        
        # Extraire les destinataires
        to_emails = [r['emailAddress']['address'] for r in recipients]
        
        # Chercher les PDF F2025
        for attachment in attachments:
            name = attachment.get('name', '')
            content_type = attachment.get('contentType', '')
            
            # V√©rifier si c'est un PDF F2025
            if 'pdf' in content_type.lower() or name.lower().endswith('.pdf'):
                # Extraire le num√©ro F2025 du nom de fichier
                matches = re.findall(r'F2025\d{3,4}', name)
                
                if matches:
                    for num_facture in matches:
                        # Enregistrer cette facture PDF
                        if num_facture not in factures_pdf_trouvees:
                            factures_pdf_trouvees[num_facture] = []
                        
                        factures_pdf_trouvees[num_facture].append({
                            'date': date,
                            'destinataires': to_emails,
                            'sujet': subject[:60],
                            'fichier': name
                        })
                        
                        tous_pdf_f2025.append({
                            'numero': num_facture,
                            'date': date,
                            'destinataires': ', '.join(to_emails)[:60],
                            'fichier': name
                        })
    
    # Afficher tous les PDF F2025 trouv√©s
    if tous_pdf_f2025:
        print('\nüìÑ TOUS LES PDF F2025 TROUV√âS:')
        print('-'*80)
        for pdf in sorted(tous_pdf_f2025, key=lambda x: x['numero']):
            print(f"{pdf['numero']} | {pdf['date']} | {pdf['destinataires'][:40]} | {pdf['fichier']}")
    
    # V√©rifier les 9 factures sp√©cifiques
    print('\n' + '='*80)
    print('üéØ V√âRIFICATION DES 9 FACTURES SANS DATE D\'ENVOI:')
    print('-'*80)
    
    factures_envoyees = []
    factures_non_envoyees = []
    
    for num_facture, info in factures_a_verifier.items():
        print(f'\n{num_facture} - {info["client"]} ({info["montant"]}‚Ç¨):')
        
        if num_facture in factures_pdf_trouvees:
            # Facture trouv√©e !
            envois = factures_pdf_trouvees[num_facture]
            
            # V√©rifier si envoy√©e au bon client
            envoyee_au_client = False
            for envoi in envois:
                if info['email'] in envoi['destinataires']:
                    envoyee_au_client = True
                    print(f'  ‚úÖ ENVOY√âE le {envoi["date"]} √† {info["email"]}')
                    print(f'     Fichier: {envoi["fichier"]}')
                    break
            
            if envoyee_au_client:
                factures_envoyees.append(num_facture)
            else:
                # Envoy√©e mais pas au bon destinataire
                print(f'  ‚ö†Ô∏è PDF trouv√© mais pas envoy√© au client attendu')
                for envoi in envois:
                    dest = ', '.join(envoi['destinataires'])[:60]
                    print(f'     {envoi["date"]} ‚Üí {dest}')
                factures_non_envoyees.append(num_facture)
        else:
            # Facture jamais envoy√©e
            print(f'  ‚ùå JAMAIS ENVOY√âE (aucun PDF trouv√©)')
            factures_non_envoyees.append(num_facture)
    
    # R√âSUM√â FINAL
    print('\n' + '='*80)
    print('üìä R√âSUM√â D√âFINITIF:')
    print('-'*80)
    
    if factures_envoyees:
        print(f'\n‚úÖ FACTURES D√âJ√Ä ENVOY√âES ({len(factures_envoyees)}):')
        for num in factures_envoyees:
            info = factures_a_verifier[num]
            print(f'  ‚Ä¢ {num} - {info["client"]} - {info["montant"]}‚Ç¨')
    
    if factures_non_envoyees:
        print(f'\n‚ùå FACTURES √Ä ENVOYER ({len(factures_non_envoyees)}):')
        total = 0
        for num in factures_non_envoyees:
            info = factures_a_verifier[num]
            print(f'  ‚Ä¢ {num} - {info["client"]:<15} {info["montant"]:>6}‚Ç¨ ‚Üí {info["email"]}')
            total += info['montant']
        print(f'\nTOTAL √Ä FACTURER: {total}‚Ç¨ HT')
    
    # Calculer le total g√©n√©ral avec les 16 juillet + 8 ao√ªt
    print('\n' + '='*80)
    print('üí∞ CALCUL FINAL AVEC TOUTES LES FACTURES:')
    print(f'  ‚Ä¢ {len(factures_non_envoyees)} factures F2025 non envoy√©es: {sum(factures_a_verifier[n]["montant"] for n in factures_non_envoyees)}‚Ç¨')
    print(f'  ‚Ä¢ 16 factures juillet sans num√©ro: 15 610‚Ç¨')
    print(f'  ‚Ä¢ 8 factures ao√ªt r√©currentes: 4 150‚Ç¨')
    total_general = sum(factures_a_verifier[n]["montant"] for n in factures_non_envoyees) + 15610 + 4150
    print(f'\n  TOTAL G√âN√âRAL: {total_general}‚Ç¨ HT ({total_general * 1.2:.0f}‚Ç¨ TTC)')

if __name__ == "__main__":
    main()