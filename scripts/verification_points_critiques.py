#!/usr/bin/env python3
"""
V√âRIFICATION DES POINTS CRITIQUES
1. DOUGS (montant exact)
2. "Autres achats 500‚Ç¨" (ponctuel vs r√©current)
3. "Maintenance 300‚Ç¨" (ponctuel vs r√©current)
"""

from datetime import datetime

def analyser_dougs():
    """Analyse d√©taill√©e du poste DOUGS"""
    
    print("üíº ANALYSE DOUGS (COMPTABLE)")
    print("=" * 50)
    
    print("üîç CE QU'ON SAIT:")
    print("  ‚Ä¢ DOUGS = comptable en ligne")
    print("  ‚Ä¢ Factures mensuelles dans Qonto")
    print("  ‚Ä¢ Estimation actuelle: 200‚Ç¨/mois")
    print("  ‚Ä¢ API Qonto indisponible pour v√©rification")
    
    print("\nüìä TARIFS DOUGS STANDARD 2025:")
    tarifs_dougs = {
        "Essentiel": {"prix": 69, "description": "Compta de base"},
        "Avanc√©": {"prix": 129, "description": "Compta + paie"},
        "Expert": {"prix": 199, "description": "Compta + paie + conseil"},
        "Sur-mesure": {"prix": "250+", "description": "Enterprise"}
    }
    
    for formule, details in tarifs_dougs.items():
        print(f"  ‚Ä¢ {formule:<12} : {details['prix']:<6}‚Ç¨/mois - {details['description']}")
    
    print("\nüéØ ESTIMATION R√âALISTE:")
    print("  ‚Ä¢ Avec 2 salari√©s (Hugo + Romain) = Paie obligatoire")
    print("  ‚Ä¢ Formule probable: Avanc√© (129‚Ç¨) ou Expert (199‚Ç¨)")
    print("  ‚Ä¢ Estimation conservatrice: 150‚Ç¨/mois")
    
    print("\n‚ùì √Ä V√âRIFIER DANS QONTO:")
    print("  ‚Ä¢ Rechercher 'DOUGS' dans les transactions")
    print("  ‚Ä¢ Montant exact factur√© mensuellement")
    print("  ‚Ä¢ √âvolution des tarifs (augmentation r√©cente?)")
    
    return 150  # Estimation r√©vis√©e

def analyser_autres_achats():
    """Analyse du poste 'Autres achats 500‚Ç¨'"""
    
    print("\nüõçÔ∏è ANALYSE 'AUTRES ACHATS 500‚Ç¨'")
    print("=" * 50)
    
    print("üîç COMPOSITION PROBABLE:")
    
    categories_autres = {
        "PONCTUEL (√† exclure)": [
            "Mat√©riel informatique exceptionnel",
            "√âquipement bureau (mobilier, etc.)",
            "Logiciels one-shot/licences annuelles",
            "Formation/certification ponctuelle",
            "√âquipement client sp√©cifique"
        ],
        "R√âCURRENT (√† garder)": [
            "Petites fournitures bureau",
            "Consommables (caf√©, etc.)",
            "Abonnements divers",
            "Petit mat√©riel de maintenance",
            "Frais divers r√©currents"
        ]
    }
    
    for type_charge, items in categories_autres.items():
        print(f"\nüìÇ {type_charge}:")
        for item in items:
            print(f"  ‚Ä¢ {item}")
    
    print("\nüí° ESTIMATION R√âVIS√âE:")
    print("  ‚Ä¢ Ponctuel √† exclure: ~300‚Ç¨ (60% des 500‚Ç¨)")
    print("  ‚Ä¢ R√©current r√©el: ~200‚Ç¨/mois (40% des 500‚Ç¨)")
    print("  ‚Ä¢ Items r√©currents: Fournitures, consommables, petits frais")
    
    print("\n‚ùì √Ä V√âRIFIER DANS QONTO:")
    print("  ‚Ä¢ Analyser les transactions 'Amazon', 'Cdiscount', etc.")
    print("  ‚Ä¢ Identifier les achats exceptionnels vs r√©currents")
    print("  ‚Ä¢ Regrouper par fr√©quence (mensuel, trimestriel, annuel)")
    
    return {
        'ancien_montant': 500,
        'ponctuel_estime': 300,
        'recurrent_estime': 200
    }

def analyser_maintenance():
    """Analyse du poste 'Maintenance 300‚Ç¨'"""
    
    print("\nüîß ANALYSE 'MAINTENANCE/R√âPARATIONS 300‚Ç¨'")
    print("=" * 50)
    
    print("üîç TYPES DE MAINTENANCE POSSIBLES:")
    
    types_maintenance = {
        "MAINTENANCE IT R√âCURRENTE": {
            "montant_estime": 80,
            "items": [
                "Maintenance serveurs/infrastructure",
                "Licences antivirus/s√©curit√©",
                "Support technique cloud",
                "Maintenance sites web"
            ]
        },
        "MAINTENANCE BUREAU/V√âHICULE R√âCURRENTE": {
            "montant_estime": 70,
            "items": [
                "Entretien v√©hicule d'entreprise",
                "Maintenance √©quipements bureau",
                "Contrats maintenance photocopieuse/imprimante",
                "Entretien locaux/climatisation"
            ]
        },
        "R√âPARATIONS PONCTUELLES": {
            "montant_estime": 150,
            "items": [
                "R√©paration mat√©riel informatique",
                "Remplacement √©quipement d√©faillant",
                "Interventions techniques exceptionnelles",
                "D√©pannages urgents"
            ]
        }
    }
    
    for type_maintenance, details in types_maintenance.items():
        print(f"\nüìÇ {type_maintenance} (~{details['montant_estime']}‚Ç¨/mois):")
        for item in details['items']:
            print(f"  ‚Ä¢ {item}")
    
    maintenance_recurrente = 80 + 70  # IT + Bureau/V√©hicule
    maintenance_ponctuelle = 150
    
    print("\nüí° ESTIMATION R√âVIS√âE:")
    print(f"  ‚Ä¢ Maintenance r√©currente: {maintenance_recurrente}‚Ç¨/mois")
    print(f"  ‚Ä¢ R√©parations ponctuelles: {maintenance_ponctuelle}‚Ç¨/mois")
    print(f"  ‚Ä¢ Total actuel: 300‚Ç¨/mois")
    print(f"  ‚Ä¢ Recommandation: Garder {maintenance_recurrente}‚Ç¨ en r√©current")
    
    print("\n‚ùì √Ä V√âRIFIER DANS QONTO:")
    print("  ‚Ä¢ Identifier contrats maintenance r√©currents")
    print("  ‚Ä¢ S√©parer les interventions ponctuelles")
    print("  ‚Ä¢ Analyser la fr√©quence r√©elle des r√©parations")
    
    return {
        'ancien_montant': 300,
        'recurrent_estime': maintenance_recurrente,
        'ponctuel_estime': maintenance_ponctuelle
    }

def nouveau_calcul_optimise():
    """Recalcul avec les estimations r√©vis√©es"""
    
    print("\n" + "=" * 80)
    print("üéØ CALCUL OPTIMIS√â AVEC R√âVISIONS")
    print("=" * 80)
    
    # Analyses des 3 points
    dougs_revise = analyser_dougs()
    autres_achats = analyser_autres_achats()
    maintenance = analyser_maintenance()
    
    print("\nüìä R√âVISIONS APPLIQU√âES:")
    print("-" * 50)
    print(f"  DOUGS: 200‚Ç¨ ‚Üí {dougs_revise}‚Ç¨ (tarif r√©aliste)")
    print(f"  Autres achats: 500‚Ç¨ ‚Üí {autres_achats['recurrent_estime']}‚Ç¨ (sans ponctuel)")
    print(f"  Maintenance: 300‚Ç¨ ‚Üí {maintenance['recurrent_estime']}‚Ç¨ (sans r√©parations)")
    
    # Nouvelles charges d√©taill√©es
    nouvelles_charges_detail = {
        "IT & Cloud": 325,      # Inchang√©
        "T√©l√©com": 127,         # Inchang√©  
        "Frais bancaires": 73,  # Inchang√©
        "DOUGS comptable": dougs_revise,
        "Autres achats r√©currents": autres_achats['recurrent_estime'],
        "Maintenance r√©currente": maintenance['recurrent_estime'],
        "Carburants + P√©ages": 200  # Inchang√© (d√©placements clients)
    }
    
    nouveau_total_detail = sum(nouvelles_charges_detail.values())
    
    print(f"\nüìã NOUVEAU D√âTAIL IT/T√âL√âCOM/BANQUE/DIVERS:")
    print("-" * 50)
    for poste, montant in nouvelles_charges_detail.items():
        print(f"  {poste:<30} : {montant:>6}‚Ç¨")
    print("-" * 50)
    print(f"  {'TOTAL R√âVIS√â':<30} : {nouveau_total_detail:>6}‚Ç¨")
    
    # Charges principales (inchang√©es)
    charges_principales = {
        "Salaires (Hugo + Romain)": 4200,
        "URSSAF (normal 2026)": 2591,
        "Loyers (SCI + VillaData)": 2160,
        "Pr√™t Riverbank": 1608,
        "Assurances": 1401
    }
    
    total_principal = sum(charges_principales.values())
    total_final = total_principal + nouveau_total_detail
    
    print(f"\nüìä TABLEAU FINAL R√âVIS√â:")
    print("-" * 60)
    for nom, montant in charges_principales.items():
        print(f"  {nom:<35} : {montant:>8,}‚Ç¨")
    print(f"  {'IT/T√©l√©com/Banque/Divers (r√©vis√©)':<35} : {nouveau_total_detail:>8,}‚Ç¨")
    print("-" * 60)
    print(f"  {'üéØ TOTAL FINAL R√âVIS√â':<35} : {total_final:>8,}‚Ç¨")
    
    # Avec objectif S√©bastien
    objectif_sebastien = 5460
    besoin_total_final = total_final + objectif_sebastien
    
    print(f"\nüí∞ BESOIN TOTAL AVEC S√âBASTIEN 3K‚Ç¨:")
    print(f"  üéØ BESOIN FINAL: {besoin_total_final:,}‚Ç¨/mois")
    
    # Comparaisons
    ancien_besoin = 18795  # Calcul pr√©c√©dent
    amelioration_finale = ancien_besoin - besoin_total_final
    
    potentiel_septembre = 6775
    couverture_finale = (potentiel_septembre / besoin_total_final) * 100
    deficit_final = besoin_total_final - potentiel_septembre
    
    print(f"\nüéâ AM√âLIORATION FINALE:")
    print(f"  Ancien besoin: {ancien_besoin:,}‚Ç¨/mois")
    print(f"  Nouveau besoin: {besoin_total_final:,}‚Ç¨/mois")
    print(f"  Am√©lioration: {amelioration_finale:,}‚Ç¨/mois")
    
    print(f"\nüìà RENTABILIT√â FINALE:")
    print(f"  Potentiel septembre: {potentiel_septembre:,}‚Ç¨/mois")
    print(f"  Couverture: {couverture_finale:.0f}%")
    print(f"  D√©ficit √† combler: {deficit_final:,}‚Ç¨/mois")
    
    print(f"\nüìÖ Analyse finale le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    
    return {
        'besoin_final': besoin_total_final,
        'amelioration': amelioration_finale,
        'couverture': couverture_finale,
        'deficit': deficit_final
    }

if __name__ == "__main__":
    resultat = nouveau_calcul_optimise()