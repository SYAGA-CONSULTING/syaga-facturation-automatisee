#!/usr/bin/env python3
"""
V√©rification de ce qui a √©t√© cr√©√© dans Excel
et pr√©paration pour Oxygen (num√©ros de facture)
"""

import pandas as pd

def verifier_excel_juillet():
    """V√©rifier les modifications dans Excel"""
    
    excel_path = '/mnt/c/Users/sebastien.questier/SYAGA consulting/Administratif - Documents/GROUPE-SYAGA-DOCUMENTS-OFFICIELS/01-ENTITES-FRANCE/SYAGA-CONSULTING-SARL/05-Commercial-Ventes/Facturation en cours 2017-12-31.xlsx'
    
    print("üîç V√âRIFICATION EXCEL - JUILLET 2025")
    print("=" * 80)
    
    try:
        df = pd.read_excel(excel_path, sheet_name='31-07-2024')
        
        print("\nüìã √âTAT ACTUEL DES LIGNES MODIFI√âES:")
        print("-" * 80)
        
        # V√©rifier les lignes cl√©s (50-76)
        lignes_a_verifier = [
            59,  # LAA Dette technologique
            60,  # LAA Tests infrastructure  
            61,  # LAA Maroc
            62,  # LEFEBVRE
            63,  # PETRAS
            66,  # TOUZEAU
            72,  # LAA D√©veloppements (nouvelle)
            73,  # LAA Maintenance HF (nouvelle)
            74,  # AXION (nouvelle)
            75,  # ART INFORMATIQUE (nouvelle)
            76   # FARBOS (nouvelle)
        ]
        
        factures_a_creer = []
        total_verifie = 0
        
        for ligne_excel in lignes_a_verifier:
            idx = ligne_excel - 2  # Index Python
            
            if idx < len(df):
                client = str(df.iloc[idx, 2]) if pd.notna(df.iloc[idx, 2]) else ''
                facture = str(df.iloc[idx, 4]) if pd.notna(df.iloc[idx, 4]) else ''
                montant = df.iloc[idx, 6] if pd.notna(df.iloc[idx, 6]) else 0
                
                try:
                    montant_num = float(montant)
                except:
                    montant_num = 0
                
                if client and montant_num > 0:
                    status = "‚úÖ Cr√©√©" if montant_num > 0 else "‚ö†Ô∏è √Ä v√©rifier"
                    print(f"Ligne {ligne_excel:3d}: {client:<20} | Montant: {montant_num:>6.0f}‚Ç¨ | {status}")
                    
                    total_verifie += montant_num
                    
                    # Si pas de num√©ro de facture ou num√©ro temporaire
                    if not facture or 'F202501' in facture or 'HF' in facture:
                        factures_a_creer.append({
                            'ligne': ligne_excel,
                            'client': client,
                            'montant': montant_num,
                            'facture_temp': facture
                        })
                elif ligne_excel in lignes_a_verifier:
                    print(f"Ligne {ligne_excel:3d}: {'VIDE':<20} | Montant:      0‚Ç¨ | ‚ö†Ô∏è Non cr√©√©")
        
        print(f"\nüí∞ TOTAL V√âRIFI√â: {total_verifie:,.0f}‚Ç¨")
        
        return factures_a_creer, total_verifie
        
    except Exception as e:
        print(f"‚ùå Erreur lecture Excel: {e}")
        return [], 0

def preparer_oxygen():
    """Pr√©parer la liste pour Oxygen"""
    
    factures, total = verifier_excel_juillet()
    
    print("\n" + "=" * 80)
    print("üìù FACTURES √Ä CR√âER DANS OXYGEN")
    print("-" * 80)
    
    # Mapping des factures planifi√©es
    mapping_oxygen = {
        59: {'client': 'LAA', 'type': 'Dette technologique', 'montant': 2700, 'heures': 27.0},
        60: {'client': 'LAA', 'type': 'Tests infrastructure', 'montant': 2150, 'heures': 21.5},
        61: {'client': 'LAA MAROC', 'type': 'Maintenance', 'montant': 150, 'heures': 1.5},
        62: {'client': 'LEFEBVRE', 'type': 'Conseil expertise', 'montant': 360, 'heures': 3.0},
        63: {'client': 'PETRAS', 'type': 'Support', 'montant': 200, 'heures': 2.0},
        66: {'client': 'TOUZEAU', 'type': 'Support IT', 'montant': 150, 'heures': 1.5},
        72: {'client': 'LAA', 'type': 'D√©veloppements ponctuels', 'montant': 900, 'heures': 9.0},
        73: {'client': 'LAA', 'type': 'Maintenance hors forfait', 'montant': 500, 'heures': 5.0},
        74: {'client': 'AXION', 'type': 'Support infrastructure', 'montant': 700, 'heures': 7.0},
        75: {'client': 'ART INFORMATIQUE', 'type': 'Maintenance', 'montant': 200, 'heures': 2.0},
        76: {'client': 'FARBOS', 'type': 'Support', 'montant': 150, 'heures': 1.5}
    }
    
    print("\nüìã LISTE POUR CR√âATION DANS OXYGEN:")
    print("\n{:<5} {:<20} {:<30} {:<8} {:<10}".format(
        "Ordre", "Client", "Type", "Heures", "Montant"))
    print("-" * 75)
    
    ordre = 1
    total_a_facturer = 0
    
    for ligne, details in sorted(mapping_oxygen.items()):
        print(f"{ordre:<5} {details['client']:<20} {details['type']:<30} {details['heures']:<8.1f} {details['montant']:<10}‚Ç¨")
        total_a_facturer += details['montant']
        ordre += 1
    
    print("-" * 75)
    print(f"{'TOTAL':<5} {'':<20} {'':<30} {'':<8} {total_a_facturer:<10}‚Ç¨")
    
    return mapping_oxygen

def generer_checklist():
    """G√©n√©rer une checklist pour Oxygen"""
    
    mapping = preparer_oxygen()
    
    print("\n" + "=" * 80)
    print("‚úÖ CHECKLIST POUR OXYGEN")
    print("-" * 80)
    
    print("\n1Ô∏è‚É£ OUVRIR OXYGEN (MemSoft)")
    print("\n2Ô∏è‚É£ CR√âER LES FACTURES DANS CET ORDRE:")
    print()
    
    # Grouper par client
    clients_factures = {}
    for ligne, details in sorted(mapping.items()):
        client = details['client']
        if client not in clients_factures:
            clients_factures[client] = []
        clients_factures[client].append(details)
    
    numero_facture_start = 130  # Commencer √† F20250130
    
    print("üìå NUM√âROTATION SUGG√âR√âE:")
    print()
    
    for client, factures_client in clients_factures.items():
        print(f"\n{client}:")
        for facture in factures_client:
            print(f"  ‚ñ° F202501{numero_facture_start:02d} - {facture['type']} - {facture['montant']}‚Ç¨ ({facture['heures']}h)")
            numero_facture_start += 1
    
    print("\n3Ô∏è‚É£ POUR CHAQUE FACTURE:")
    print("  ‚Ä¢ S√©lectionner le client")
    print("  ‚Ä¢ P√©riode : Juillet 2025")
    print("  ‚Ä¢ Description : [Type de prestation]")
    print("  ‚Ä¢ Mention : 'Hors forfait - D√©tail Clockify joint'")
    print("  ‚Ä¢ TVA : 20%")
    print("  ‚Ä¢ √âch√©ance : 30 jours")
    
    print("\n4Ô∏è‚É£ APR√àS CR√âATION:")
    print("  ‚Ä¢ Noter le num√©ro de facture r√©el")
    print("  ‚Ä¢ Mettre √† jour Excel avec le bon num√©ro")
    print("  ‚Ä¢ Exporter en PDF")
    print("  ‚Ä¢ Joindre rapport Clockify")

if __name__ == "__main__":
    # V√©rifier Excel
    factures, total = verifier_excel_juillet()
    
    # Pr√©parer Oxygen
    mapping = preparer_oxygen()
    
    # G√©n√©rer checklist
    generer_checklist()
    
    print("\n" + "=" * 80)
    print("üíæ SAUVEGARDE DES NUM√âROS")
    print("-" * 80)
    
    print("\nUne fois les factures cr√©√©es dans Oxygen, noter ici:")
    print("```")
    print("F20250___ : LAA Dette technologique (2700‚Ç¨)")
    print("F20250___ : LAA Tests infrastructure (2150‚Ç¨)")
    print("F20250___ : LAA D√©veloppements (900‚Ç¨)")
    print("F20250___ : LAA Maintenance HF (500‚Ç¨)")
    print("F20250___ : LAA MAROC (150‚Ç¨)")
    print("F20250___ : LEFEBVRE (360‚Ç¨)")
    print("F20250___ : PETRAS (200‚Ç¨)")
    print("F20250___ : TOUZEAU (150‚Ç¨)")
    print("F20250___ : AXION (700‚Ç¨)")
    print("F20250___ : ART INFORMATIQUE (200‚Ç¨)")
    print("F20250___ : FARBOS (150‚Ç¨)")
    print("```")
    
    print("\n‚úÖ Total √† facturer: 8,160‚Ç¨ (+ ANONE 300‚Ç¨ = 8,460‚Ç¨)")