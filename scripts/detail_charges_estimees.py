#!/usr/bin/env python3
"""
D√âTAIL ESTIM√â DES CHARGES IT/T√âL√âCOM/BANQUE/DIVERS
Bas√© sur les montants du tableau initial
"""

from datetime import datetime

def analyser_detail_charges():
    """D√©tail des 2051‚Ç¨ IT/T√©l√©com/Banque/Divers"""
    
    print("üîç D√âTAIL DES CHARGES IT/T√âL√âCOM/BANQUE/DIVERS")
    print("=" * 60)
    print("Analyse du montant global: 2,051‚Ç¨/mois\n")
    
    # D√©tail bas√© sur le tableau initial
    charges_detail = {
        "üíª IT & CLOUD": {
            "Claude.AI Pro": 114,
            "Microsoft 365": 91,
            "GitHub": 20,
            "OVH": 30,
            "Google Services": 20,
            "Autres SaaS": 50  # Estimation
        },
        "üì± T√âL√âCOM": {
            "Free Mobile": 36,
            "Free Internet": 71,
            "Autres t√©l√©com": 20  # Estimation
        },
        "üè¶ FRAIS BANCAIRES": {
            "Frais Qonto": 29,
            "Frais BP": 44
        },
        "üõçÔ∏è CHARGES DIVERSES": {
            "Carburants": 150,
            "P√©ages": 50,
            "Amazon/Fournitures": 196,
            "H√¥tels/D√©placements": 400,
            "Maintenance/R√©parations": 300,
            "Autres achats": 500
        },
        "üíº COMPTABLE": {
            "DOUGS (√† confirmer)": 400  # √Ä v√©rifier dans Qonto
        }
    }
    
    # Calcul et affichage
    total_calcule = 0
    
    for categorie, items in charges_detail.items():
        print(f"\n{categorie}")
        print("-" * 40)
        
        sous_total = 0
        for nom, montant in items.items():
            print(f"  {nom:<25} : {montant:>6}‚Ç¨")
            sous_total += montant
        
        print(f"  {'SOUS-TOTAL':<25} : {sous_total:>6}‚Ç¨")
        total_calcule += sous_total
    
    print("\n" + "=" * 60)
    print(f"üéØ TOTAL CALCUL√â: {total_calcule}‚Ç¨/mois")
    print(f"üìä MONTANT INITIAL: 2,051‚Ç¨/mois")
    print(f"üìà DIFF√âRENCE: {total_calcule - 2051:+}‚Ç¨/mois")
    
    # Analyse des postes les plus lourds
    print("\nüîç ANALYSE DES GROS POSTES:")
    print("-" * 30)
    
    gros_postes = []
    for categorie, items in charges_detail.items():
        for nom, montant in items.items():
            if montant >= 100:
                gros_postes.append((nom, montant, categorie))
    
    # Trier par montant d√©croissant
    gros_postes.sort(key=lambda x: x[1], reverse=True)
    
    for nom, montant, categorie in gros_postes:
        print(f"  {nom:<30} : {montant:>6}‚Ç¨ ({categorie.split()[1]})")
    
    # Recommandations d'optimisation
    print("\nüí° RECOMMANDATIONS D'OPTIMISATION:")
    print("-" * 40)
    
    optimisations = [
        ("Autres achats (500‚Ç¨)", "R√©duire de 50%", -250),
        ("H√¥tels/D√©placements (400‚Ç¨)", "Optimiser missions", -120),
        ("Maintenance/R√©parations (300‚Ç¨)", "N√©gocier contrats", -90),
        ("Amazon/Fournitures (196‚Ç¨)", "Grouper achats", -50),
        ("Carburants (150‚Ç¨)", "Optimiser trajets", -30)
    ]
    
    economie_totale = 0
    for poste, action, economie in optimisations:
        print(f"  {poste:<25} ‚Üí {action:<20} : {economie:>+4}‚Ç¨")
        economie_totale += abs(economie)
    
    print(f"\nüéâ √âCONOMIE POTENTIELLE TOTALE: {economie_totale}‚Ç¨/mois")
    print(f"üìâ NOUVEAU TOTAL OPTIMIS√â: {total_calcule - economie_totale}‚Ç¨/mois")
    
    return {
        'total_actuel': total_calcule,
        'economie_possible': economie_totale,
        'total_optimise': total_calcule - economie_totale
    }

def nouveau_tableau_final():
    """G√©n√®re le tableau final avec charges d√©taill√©es"""
    
    print("\n" + "=" * 80)
    print("üìä TABLEAU FINAL DES CHARGES (D√âTAILL√â)")
    print("=" * 80)
    
    # Charges principales (d√©j√† valid√©es)
    charges_principales = {
        "Salaires (Hugo + Romain)": 4200,
        "URSSAF (normal 2026)": 2591,
        "Loyers (SCI + VillaData)": 2160,
        "Pr√™t Riverbank": 1608,
        "Assurances": 1401
    }
    
    # Charges d√©taill√©es analys√©es
    charges_detail = analyser_detail_charges()
    
    # Assemblage final
    print(f"\nüìã CHARGES MENSUELLES D√âTAILL√âES:")
    print("-" * 50)
    
    total_final = 0
    
    # Charges principales
    for nom, montant in charges_principales.items():
        print(f"  {nom:<30} : {montant:>8,}‚Ç¨")
        total_final += montant
    
    # Charges d√©taill√©es
    print(f"  {'IT/T√©l√©com/Banque/Divers':<30} : {charges_detail['total_actuel']:>8,}‚Ç¨")
    total_final += charges_detail['total_actuel']
    
    print("-" * 50)
    print(f"  {'TOTAL MENSUEL':<30} : {total_final:>8,}‚Ç¨")
    
    # Avec objectif S√©bastien
    objectif_sebastien = 5460
    besoin_total = total_final + objectif_sebastien
    
    print(f"\nüéØ AVEC OBJECTIF S√âBASTIEN 3K‚Ç¨ NET:")
    print(f"  Charges S√©bastien: {objectif_sebastien:,}‚Ç¨")
    print(f"  üéØ BESOIN TOTAL: {besoin_total:,}‚Ç¨/mois")
    
    # Potentiel septembre
    potentiel_septembre = 6775  # 27,100‚Ç¨ √∑ 4 mois
    couverture = (potentiel_septembre / besoin_total) * 100
    
    print(f"\nüìà COUVERTURE POTENTIEL SEPTEMBRE:")
    print(f"  Potentiel mensuel: {potentiel_septembre:,}‚Ç¨")
    print(f"  Couverture: {couverture:.0f}% du besoin")
    
    print(f"\nüìÖ Analyse termin√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")

if __name__ == "__main__":
    nouveau_tableau_final()