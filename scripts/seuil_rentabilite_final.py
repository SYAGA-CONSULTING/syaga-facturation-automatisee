#!/usr/bin/env python3
"""
CALCUL FINAL SEUIL RENTABILIT√â AVEC DONN√âES CORRIG√âES
Version d√©finitive apr√®s toutes les corrections
"""

from datetime import datetime

class AnalyseFinaleRentabilite:
    def __init__(self):
        print("üíé ANALYSE FINALE SEUIL DE RENTABILIT√â")
        print("="*70)
        print("Version corrig√©e avec tous les ajustements\n")
        
    def calculate_final_charges(self):
        """Calcul d√©finitif des charges mensuelles"""
        
        print("üìä CHARGES MENSUELLES R√âELLES FINALES")
        print("="*70)
        
        # CHARGES QONTO V√âRIFI√âES
        charges_qonto = {
            'Salaires (Hugo + Romain)': 5610,
            'Charges sociales (URSSAF)': 6032,
            'Imp√¥ts (DGFIP)': 2524,
            'Loyer bureaux (SCI QSSP)': 900,
            'Loyer bureaux (VillaData)': 1260,  # 1200‚Ç¨ HT = 1260‚Ç¨ TTC confirm√©
            'Pr√™ts (Riverbank)': 2144,
            'Comptable (Nobelia)': 1330,
            'Assurances (AMV + SwissLife)': 544,  # 397 + 147
            'Autres charges l√©gitimes': 3000  # R√©duit apr√®s exclusion anomalies
        }
        
        # CHARGES BANQUE POPULAIRE
        charges_bp = {
            'T√©l√©com (Free Mobile + Internet)': 107,
            'Frais bancaires': 44,
            'Carburants et divers': 200
        }
        
        # EXCLUSIONS CONFIRM√âES (ne pas compter)
        exclusions = [
            "Virements internes SYAGA BPPC (14,000‚Ç¨/3mois)",
            "Pierre Questier - parti fin mai (3,753‚Ç¨)",
            "Doubles comptages S√©bastien (10,500‚Ç¨/3mois)"
        ]
        
        total_qonto = sum(charges_qonto.values())
        total_bp = sum(charges_bp.values())
        total_charges = total_qonto + total_bp
        
        # Affichage d√©taill√©
        print("\nüí≥ CHARGES QONTO:")
        for label, montant in charges_qonto.items():
            print(f"  {label:35} : {montant:7,}‚Ç¨")
        print(f"  {'SOUS-TOTAL QONTO':35} : {total_qonto:7,}‚Ç¨")
        
        print("\nüè¶ CHARGES BANQUE POPULAIRE:")
        for label, montant in charges_bp.items():
            print(f"  {label:35} : {montant:7,}‚Ç¨")
        print(f"  {'SOUS-TOTAL BP':35} : {total_bp:7,}‚Ç¨")
        
        print("\n‚ùå EXCLUSIONS (confirm√©es non r√©currentes):")
        for exclusion in exclusions:
            print(f"  ‚Ä¢ {exclusion}")
        
        print("\n" + "="*70)
        print(f"üí∞ TOTAL CHARGES MENSUELLES : {total_charges:,}‚Ç¨")
        print("="*70)
        
        return total_charges
    
    def calculate_break_even_scenarios(self, charges_base):
        """Calcul de diff√©rents sc√©narios de rentabilit√©"""
        
        print("\nüéØ SC√âNARIOS DE RENTABILIT√â")
        print("="*70)
        
        # Constants
        total_hours_clockify = 255.8
        ratio_actuel = 35.6
        ratio_net_to_charges = 1.82
        
        # Sc√©narios d'objectifs
        scenarios = [
            {
                'nom': 'SURVIE (S√©bastien seul)',
                'sebastien_net': 3000,
                'salaries': 0,
                'salarie_net': 0
            },
            {
                'nom': 'CONSOLIDATION (S√©bastien + 1 salari√©)',
                'sebastien_net': 3000,
                'salaries': 1,
                'salarie_net': 2000
            },
            {
                'nom': 'CROISSANCE (S√©bastien + 2 salari√©s)',
                'sebastien_net': 3000,
                'salaries': 2,
                'salarie_net': 2000
            },
            {
                'nom': 'OPTIMIS√â (Charges -15%, S√©bastien seul)',
                'sebastien_net': 3000,
                'salaries': 0,
                'salarie_net': 0,
                'reduction_charges': 0.15
            }
        ]
        
        for scenario in scenarios:
            print(f"\nüìå SC√âNARIO: {scenario['nom']}")
            print("-" * 50)
            
            # Calcul charges
            charges = charges_base * (1 - scenario.get('reduction_charges', 0))
            cout_sebastien = scenario['sebastien_net'] * ratio_net_to_charges
            cout_salaries = scenario['salaries'] * scenario['salarie_net'] * ratio_net_to_charges
            
            total_besoin = charges + cout_sebastien + cout_salaries
            
            print(f"  Charges base : {charges:,.0f}‚Ç¨")
            if scenario.get('reduction_charges'):
                print(f"  (R√©duction de {scenario['reduction_charges']*100:.0f}%)")
            print(f"  Objectif S√©bastien : {cout_sebastien:,.0f}‚Ç¨")
            if scenario['salaries'] > 0:
                print(f"  Objectif {scenario['salaries']} salari√©(s) : {cout_salaries:,.0f}‚Ç¨")
            print(f"  TOTAL BESOIN : {total_besoin:,.0f}‚Ç¨/mois")
            
            # Calcul ratios n√©cessaires
            for tarif in [100, 120, 150]:
                heures_necessaires = total_besoin / tarif
                ratio_necessaire = (heures_necessaires / total_hours_clockify) * 100
                
                if ratio_necessaire <= 100:
                    faisabilite = "‚úÖ R√âALISABLE" if ratio_necessaire <= 75 else "‚ö†Ô∏è TENDU"
                else:
                    faisabilite = "‚ùå IMPOSSIBLE"
                
                print(f"\n  √Ä {tarif}‚Ç¨/h :")
                print(f"    Heures n√©cessaires : {heures_necessaires:.0f}h")
                print(f"    Ratio n√©cessaire : {ratio_necessaire:.0f}%")
                print(f"    Status : {faisabilite}")
    
    def propose_action_plan(self):
        """Plan d'action concret pour la rentabilit√©"""
        
        print("\n" + "="*70)
        print("üöÄ PLAN D'ACTION IMM√âDIAT")
        print("="*70)
        
        actions = [
            {
                'priorite': 'üî¥ URGENT',
                'action': 'Augmenter le ratio facturable',
                'actuel': '35.6%',
                'cible': '65% minimum',
                'gain': '+8,800‚Ç¨/mois √† 100‚Ç¨/h',
                'delai': '3 mois'
            },
            {
                'priorite': 'üî¥ URGENT',
                'action': 'Ren√©gocier les tarifs',
                'actuel': '100‚Ç¨/h',
                'cible': '120‚Ç¨/h minimum',
                'gain': '+20% de CA',
                'delai': 'Imm√©diat nouveaux clients'
            },
            {
                'priorite': 'üü† IMPORTANT',
                'action': 'R√©duire charges "Autres"',
                'actuel': '3,000‚Ç¨/mois',
                'cible': '1,500‚Ç¨/mois',
                'gain': '-1,500‚Ç¨/mois charges',
                'delai': '2 mois'
            },
            {
                'priorite': 'üü† IMPORTANT',
                'action': 'Forfaits r√©currents',
                'actuel': '0‚Ç¨',
                'cible': '5,000‚Ç¨/mois',
                'gain': '+5,000‚Ç¨ revenus stables',
                'delai': '3-6 mois'
            },
            {
                'priorite': 'üü° MOYEN TERME',
                'action': 'Optimiser loyers',
                'actuel': '2,160‚Ç¨ (2 bureaux)',
                'cible': '1,200‚Ç¨ (1 bureau)',
                'gain': '-960‚Ç¨/mois',
                'delai': 'Fin de bail'
            }
        ]
        
        print("\nüìã ACTIONS PAR PRIORIT√â:\n")
        
        for action in actions:
            print(f"{action['priorite']} {action['action']}")
            print(f"   Actuel : {action['actuel']}")
            print(f"   Cible : {action['cible']}")
            print(f"   Impact : {action['gain']}")
            print(f"   D√©lai : {action['delai']}")
            print()
        
        # Projection si actions r√©alis√©es
        print("="*70)
        print("üìà PROJECTION AVEC ACTIONS R√âALIS√âES")
        print("="*70)
        
        charges_optimisees = 23695 * 0.85  # -15% de charges
        ratio_cible = 65
        tarif_moyen = 115  # Mix 100-120‚Ç¨
        forfaits_recurrents = 5000
        total_hours = 255.8
        
        revenue_facturation = total_hours * (ratio_cible/100) * tarif_moyen
        revenue_total = revenue_facturation + forfaits_recurrents
        
        cout_sebastien = 3000 * 1.82
        charges_totales = charges_optimisees + cout_sebastien
        
        profit = revenue_total - charges_totales
        
        print(f"\nüí∞ REVENUS:")
        print(f"  Facturation ({ratio_cible}% √ó {tarif_moyen}‚Ç¨/h) : {revenue_facturation:,.0f}‚Ç¨")
        print(f"  Forfaits r√©currents : {forfaits_recurrents:,.0f}‚Ç¨")
        print(f"  TOTAL REVENUS : {revenue_total:,.0f}‚Ç¨")
        
        print(f"\nüí∏ CHARGES:")
        print(f"  Charges optimis√©es : {charges_optimisees:,.0f}‚Ç¨")
        print(f"  S√©bastien (3000‚Ç¨ net) : {cout_sebastien:,.0f}‚Ç¨")
        print(f"  TOTAL CHARGES : {charges_totales:,.0f}‚Ç¨")
        
        print(f"\nüéØ R√âSULTAT:")
        print(f"  Profit mensuel : {profit:+,.0f}‚Ç¨")
        
        if profit > 0:
            print(f"\n  ‚úÖ RENTABILIT√â ATTEINTE !")
            print(f"  Possibilit√© d'embaucher dans {profit/3640:.0f} mois")
        else:
            print(f"\n  ‚ö†Ô∏è D√©ficit restant, actions suppl√©mentaires n√©cessaires")

def main():
    """Analyse finale compl√®te"""
    
    analyser = AnalyseFinaleRentabilite()
    
    # 1. Calculer les vraies charges
    charges_reelles = analyser.calculate_final_charges()
    
    # 2. Analyser diff√©rents sc√©narios
    analyser.calculate_break_even_scenarios(charges_reelles)
    
    # 3. Proposer plan d'action
    analyser.propose_action_plan()
    
    print("\n" + "="*70)
    print(f"üìÖ Analyse g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
    print("üí° Les loyers totaux sont : 900‚Ç¨ (SCI QSSP) + 1260‚Ç¨ (VillaData) = 2160‚Ç¨/mois")
    print("="*70)

if __name__ == "__main__":
    main()