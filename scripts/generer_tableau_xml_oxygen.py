#!/usr/bin/env python3
"""
G√âN√âRATEUR TABLEAU COMPLET POUR XML OXYGEN
Cr√©e un tableau de toutes les factures √† √©diter (r√©currentes + ponctuelles)
"""

import sqlite3
from datetime import datetime, timedelta
import json
import pandas as pd

# CONFIGURATION CLIENTS R√âCURRENTS (d√©finitive)
CLIENTS_RECURRENTS = {
    # MENSUELS - 1er du mois
    'LAA': {
        'forfait': 1400.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait maintenance mensuel LAA'
    },
    'PHARMABEST': {
        'forfait': 500.00,
        'frequence': 'mensuel', 
        'jour': 1,
        'description': 'Forfait maintenance mensuel Pharmabest'
    },
    'BUQUET': {
        'forfait': 500.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait maintenance mensuel Buquet'
    },
    'PETRAS': {
        'forfait': 600.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait maintenance mensuel Petras'
    },
    'PROVENCALE': {
        'forfait': 400.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait maintenance mensuel Proven√ßale'
    },
    'SEXTANT': {
        'forfait': 400.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait conseil mensuel Sextant'
    },
    'QUADRIMEX': {
        'forfait': 250.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait support mensuel Quadrimex'
    },
    'GENLOG': {
        'forfait': 100.00,
        'frequence': 'mensuel',
        'jour': 1,
        'description': 'Forfait maintenance mensuel Genlog'
    },
    
    # TRIMESTRIEL
    'BELFONTE': {
        'forfait': 751.60,
        'frequence': 'trimestriel',
        'jour': 1,
        'description': 'Forfait conseil trimestriel Belfonte'
    }
}

def generer_tableau_complet_xml():
    """G√©n√®re le tableau JUILLET + AO√õT seulement pour XML Oxygen"""
    
    conn = sqlite3.connect('../data/factures_cache.db')
    cursor = conn.cursor()
    
    print("üìã G√âN√âRATION TABLEAU JUILLET + AO√õT POUR XML OXYGEN")
    print("=" * 80)
    
    factures_xml = []
    
    # 1. Factures fin juillet (prestations r√©elles - temps pass√©)
    print("\n1Ô∏è‚É£ FACTURES FIN JUILLET - PRESTATIONS R√âELLES")
    print("-" * 50)
    
    # Analyser les donn√©es Clockify juillet pour identifier les clients
    clockify_juillet = [
        ('BUQUET', 30.0, 'Projet RE2020'),  # Du CSV r√©el
        ('LAA', 25.0, 'Maintenance serveurs'),
        ('PHARMABEST', 12.0, 'Support SharePoint'), 
        ('PETRAS', 18.0, 'D√©veloppement application'),
        ('PROVENCALE', 22.0, 'Audit s√©curit√©'),
        ('UAI', 15.0, 'Optimisation base de donn√©es'),
        ('AXION', 8.0, 'Formation √©quipe'),
        ('GUERBET', 14.0, 'Migration cloud'),
        ('LEFEBVRE', 10.0, 'Consultation juridique IT'),
        ('PORT DE BOUC', 6.0, 'Support technique'),
        ('FARBOS', 20.0, 'D√©veloppement module'),
        ('GARAGE TOUZEAU', 5.0, 'Maintenance site web'),
        ('ART INFORMATIQUE', 12.0, 'Audit r√©seau'),
        ('QUADRIMEX', 16.0, 'Int√©gration syst√®me'),
        ('GENLOG', 9.0, 'Support utilisateurs')
    ]
    
    taux_horaire = 110.00
    
    for client, heures, description in clockify_juillet:
        montant_ht = heures * taux_horaire
        
        facture = {
            'type': 'FIN_MOIS_JUILLET',
            'numero': '√Ä_G√âN√âRER',
            'date_facture': '2025-07-31',
            'client': client,
            'montant_ht': montant_ht,
            'montant_tva': montant_ht * 0.20,
            'montant_ttc': montant_ht * 1.20,
            'description': f'{description} - Juillet 2025 ({heures}h)',
            'mode_paiement': 'Virement',
            'echeance': '2025-08-30',
            'status': 'TEMPS_CLOCKIFY'
        }
        factures_xml.append(facture)
        print(f"üìä {client:15} - {heures:4.1f}h √ó {taux_horaire}‚Ç¨ = {montant_ht:7.2f}‚Ç¨")
    
    print(f"\nTotal fin juillet: {len(clockify_juillet)} factures")
    
    # 2. Factures r√©currentes 1er ao√ªt
    print("\n2Ô∏è‚É£ FACTURES R√âCURRENTES 1ER AO√õT")
    print("-" * 50)
    
    # Les 8 clients mensuels r√©currents
    for client, config in CLIENTS_RECURRENTS.items():
        if config['frequence'] == 'mensuel':  # Pas BELFONTE (trimestriel)
            facture = {
                'type': 'R√âCURRENT_AO√õT',
                'numero': '√Ä_G√âN√âRER',
                'date_facture': '2025-08-01',
                'client': client,
                'montant_ht': config['forfait'],
                'montant_tva': config['forfait'] * 0.20,
                'montant_ttc': config['forfait'] * 1.20,
                'description': f"{config['description']} - Ao√ªt 2025",
                'mode_paiement': 'Virement',
                'echeance': '2025-08-31',
                'status': 'R√âCURRENT'
            }
            factures_xml.append(facture)
            print(f"üîÑ {client:15} - Forfait mensuel = {config['forfait']:7.2f}‚Ç¨")
    
    print(f"\nTotal r√©currentes ao√ªt: 8 factures")
    
    # 3. Cr√©er le DataFrame pour export
    print("\n3Ô∏è‚É£ CR√âATION TABLEAU EXPORT XML")
    print("-" * 50)
    
    df = pd.DataFrame(factures_xml)
    
    # R√©organiser les colonnes pour Oxygen
    colonnes_oxygen = [
        'type', 'numero', 'date_facture', 'client', 
        'description', 'montant_ht', 'montant_tva', 'montant_ttc',
        'mode_paiement', 'echeance', 'status'
    ]
    
    if not df.empty:
        df = df[colonnes_oxygen]
        
        # Trier par date puis par client
        df = df.sort_values(['date_facture', 'client'])
        
        # Sauvegarder en CSV pour import dans Oxygen
        fichier_csv = '../export_oxygen_factures.csv'
        df.to_csv(fichier_csv, index=False, encoding='utf-8-sig', sep=';')
        print(f"üìÑ CSV cr√©√©: {fichier_csv}")
        
        # Sauvegarder en Excel aussi
        fichier_excel = '../export_oxygen_factures.xlsx'
        df.to_excel(fichier_excel, index=False, sheet_name='Factures_A_Editer')
        print(f"üìä Excel cr√©√©: {fichier_excel}")
        
        # Afficher le r√©sum√©
        print("\n4Ô∏è‚É£ R√âSUM√â TABLEAU OXYGEN")
        print("-" * 50)
        
        print(f"üìã TOTAL: {len(df)} factures √† √©diter")
        print(f"üí∞ MONTANT TOTAL: {df['montant_ht'].sum():,.2f}‚Ç¨ HT")
        print(f"üí∞ MONTANT TOTAL: {df['montant_ttc'].sum():,.2f}‚Ç¨ TTC")
        
        # R√©partition par type
        recap_type = df.groupby('type').agg({
            'montant_ht': ['count', 'sum']
        }).round(2)
        
        print("\nüìä R√âPARTITION PAR TYPE:")
        for type_fact in df['type'].unique():
            nb = len(df[df['type'] == type_fact])
            ca = df[df['type'] == type_fact]['montant_ht'].sum()
            print(f"  {type_fact:12}: {nb:2} factures = {ca:8,.2f}‚Ç¨ HT")
        
        # R√©partition par mois
        df['mois'] = df['date_facture'].str[:7]
        recap_mois = df.groupby('mois')['montant_ht'].sum().round(2)
        
        print("\nüìÖ R√âPARTITION PAR MOIS:")
        for mois, montant in recap_mois.items():
            nb_fact = len(df[df['mois'] == mois])
            print(f"  {mois}: {nb_fact:2} factures = {montant:8,.2f}‚Ç¨ HT")
        
        # Format XML pour Oxygen (structure simple)
        print("\n5Ô∏è‚É£ G√âN√âRATION XML OXYGEN")
        print("-" * 50)
        
        xml_content = generate_oxygen_xml(df)
        fichier_xml = '../export_oxygen_factures.xml'
        
        with open(fichier_xml, 'w', encoding='utf-8') as f:
            f.write(xml_content)
        
        print(f"üîß XML Oxygen cr√©√©: {fichier_xml}")
        
        # Instructions d'utilisation
        print("\n6Ô∏è‚É£ INSTRUCTIONS IMPORT OXYGEN")
        print("-" * 50)
        print("1. Ouvrir Oxygen Comptabilit√©")
        print("2. Menu > Facturation > Import factures")
        print(f"3. S√©lectionner: {fichier_xml}")
        print("4. Valider l'import")
        print("5. G√©n√©rer les PDF depuis Oxygen")
        print("6. Joindre justificatifs Clockify")
        print("7. Envoyer emails via script SYAGA")
    
    else:
        print("‚ùå Aucune facture √† exporter")
    
    conn.close()
    
    print("\n" + "=" * 80)
    print("‚úÖ TABLEAU COMPLET POUR XML OXYGEN TERMIN√â")
    print("=" * 80)
    
    return df if not df.empty else None

def generate_oxygen_xml(df):
    """G√©n√®re le XML compatible Oxygen"""
    
    xml = '<?xml version="1.0" encoding="UTF-8"?>\n'
    xml += '<facturation>\n'
    xml += '  <informations>\n'
    xml += f'    <date_export>{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</date_export>\n'
    xml += f'    <nb_factures>{len(df)}</nb_factures>\n'
    xml += f'    <total_ht>{df["montant_ht"].sum():.2f}</total_ht>\n'
    xml += f'    <total_ttc>{df["montant_ttc"].sum():.2f}</total_ttc>\n'
    xml += '  </informations>\n'
    xml += '  <factures>\n'
    
    for _, row in df.iterrows():
        xml += '    <facture>\n'
        xml += f'      <numero>{row["numero"]}</numero>\n'
        xml += f'      <date>{row["date_facture"]}</date>\n'
        xml += f'      <client><![CDATA[{row["client"]}]]></client>\n'
        xml += f'      <description><![CDATA[{row["description"]}]]></description>\n'
        xml += f'      <montant_ht>{row["montant_ht"]:.2f}</montant_ht>\n'
        xml += f'      <montant_tva>{row["montant_tva"]:.2f}</montant_tva>\n'
        xml += f'      <montant_ttc>{row["montant_ttc"]:.2f}</montant_ttc>\n'
        xml += f'      <taux_tva>20.00</taux_tva>\n'
        xml += f'      <mode_paiement>{row["mode_paiement"]}</mode_paiement>\n'
        xml += f'      <echeance>{row["echeance"]}</echeance>\n'
        xml += f'      <type>{row["type"]}</type>\n'
        xml += f'      <status>{row["status"]}</status>\n'
        xml += '    </facture>\n'
    
    xml += '  </factures>\n'
    xml += '</facturation>'
    
    return xml

if __name__ == "__main__":
    df_factures = generer_tableau_complet_xml()