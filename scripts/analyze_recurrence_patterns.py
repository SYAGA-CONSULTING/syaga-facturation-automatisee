#!/usr/bin/env python3
"""
Analyse compl√®te des patterns de r√©currence
Identifie les facturations mensuelles, trimestrielles, ponctuelles, etc.
"""

import sqlite3
from datetime import datetime, timedelta
from collections import defaultdict
import json

def analyser_patterns_recurrence():
    """Analyse tous les patterns de r√©currence par client"""
    
    conn = sqlite3.connect('../data/factures_cache.db')
    cursor = conn.cursor()
    
    print("=" * 80)
    print("ANALYSE DES PATTERNS DE R√âCURRENCE")
    print("=" * 80)
    print()
    
    # R√©cup√©rer toutes les factures par client
    cursor.execute("""
        SELECT client_nom, date_facture, total_ht, objet, numero_facture
        FROM factures
        WHERE total_ht > 0
        ORDER BY client_nom, date_facture
    """)
    
    # Organiser par client
    factures_par_client = defaultdict(list)
    for row in cursor.fetchall():
        factures_par_client[row[0]].append({
            'date': row[1],
            'montant': row[2],
            'objet': row[3],
            'numero': row[4]
        })
    
    # Analyser chaque client
    patterns_detectes = {}
    
    for client, factures in factures_par_client.items():
        if len(factures) < 3:
            continue  # Pas assez de donn√©es pour d√©tecter un pattern
        
        # Analyser les intervalles entre factures
        intervalles = []
        montants = defaultdict(int)
        
        for i in range(1, len(factures)):
            try:
                date1 = datetime.strptime(factures[i-1]['date'][:10], '%Y-%m-%d')
                date2 = datetime.strptime(factures[i]['date'][:10], '%Y-%m-%d')
                jours = (date2 - date1).days
                intervalles.append(jours)
                
                # Compter les montants r√©currents
                montant = round(factures[i]['montant'], 2)
                montants[montant] += 1
            except:
                pass
        
        if not intervalles:
            continue
        
        # Calculer l'intervalle moyen
        intervalle_moyen = sum(intervalles) / len(intervalles)
        
        # D√©terminer le type de r√©currence
        if intervalle_moyen <= 35:  # ~1 mois
            type_recurrence = "MENSUELLE"
            frequence_annuelle = 12
        elif intervalle_moyen <= 65:  # ~2 mois
            type_recurrence = "BIMESTRIELLE"
            frequence_annuelle = 6
        elif intervalle_moyen <= 95:  # ~3 mois
            type_recurrence = "TRIMESTRIELLE"
            frequence_annuelle = 4
        elif intervalle_moyen <= 185:  # ~6 mois
            type_recurrence = "SEMESTRIELLE"
            frequence_annuelle = 2
        elif intervalle_moyen <= 370:  # ~1 an
            type_recurrence = "ANNUELLE"
            frequence_annuelle = 1
        else:
            type_recurrence = "PONCTUELLE"
            frequence_annuelle = 0
        
        # Trouver le montant le plus fr√©quent
        if montants:
            montant_recurrent = max(montants.items(), key=lambda x: x[1])
            montant_principal = montant_recurrent[0]
            freq_montant = montant_recurrent[1]
        else:
            montant_principal = sum(f['montant'] for f in factures) / len(factures)
            freq_montant = 0
        
        # Calculer la r√©gularit√© (√©cart-type des intervalles)
        if len(intervalles) > 1:
            ecart_type = (sum((x - intervalle_moyen) ** 2 for x in intervalles) / len(intervalles)) ** 0.5
            regularite = "TR√àS R√âGULIER" if ecart_type < 10 else "R√âGULIER" if ecart_type < 20 else "VARIABLE"
        else:
            regularite = "IND√âTERMIN√â"
        
        # Derni√®re facture
        derniere_facture = factures[-1]
        try:
            derniere_date = datetime.strptime(derniere_facture['date'][:10], '%Y-%m-%d')
        except ValueError:
            # Date malform√©e, on prend aujourd'hui moins 30 jours
            derniere_date = datetime.now() - timedelta(days=30)
        
        # Prochaine facture pr√©vue
        if type_recurrence != "PONCTUELLE":
            prochaine_date = derniere_date + timedelta(days=int(intervalle_moyen))
            prochaine_prevue = prochaine_date.strftime('%Y-%m-%d')
        else:
            prochaine_prevue = "Non d√©termin√©"
        
        patterns_detectes[client] = {
            'type_recurrence': type_recurrence,
            'frequence_annuelle': frequence_annuelle,
            'intervalle_moyen_jours': round(intervalle_moyen, 1),
            'montant_recurrent': montant_principal,
            'regularite': regularite,
            'nb_factures_total': len(factures),
            'derniere_facture': {
                'date': derniere_facture['date'],
                'montant': derniere_facture['montant']
            },
            'prochaine_prevue': prochaine_prevue,
            'ca_annuel_estime': montant_principal * frequence_annuelle if frequence_annuelle > 0 else 0
        }
    
    # Afficher les r√©sultats
    print("üìä CLIENTS AVEC FACTURATION MENSUELLE")
    print("-" * 40)
    for client, pattern in patterns_detectes.items():
        if pattern['type_recurrence'] == "MENSUELLE":
            print(f"\n{client}:")
            print(f"  ‚Ä¢ Montant mensuel: {pattern['montant_recurrent']:.2f}‚Ç¨")
            print(f"  ‚Ä¢ R√©gularit√©: {pattern['regularite']}")
            print(f"  ‚Ä¢ CA annuel estim√©: {pattern['ca_annuel_estime']:.2f}‚Ç¨")
            print(f"  ‚Ä¢ Derni√®re: {pattern['derniere_facture']['date']}")
            print(f"  ‚Ä¢ Prochaine pr√©vue: {pattern['prochaine_prevue']}")
    
    print("\n" + "=" * 40)
    print("üìä CLIENTS AVEC AUTRES R√âCURRENCES")
    print("-" * 40)
    for client, pattern in patterns_detectes.items():
        if pattern['type_recurrence'] in ["BIMESTRIELLE", "TRIMESTRIELLE", "SEMESTRIELLE", "ANNUELLE"]:
            print(f"\n{client} ({pattern['type_recurrence']}):")
            print(f"  ‚Ä¢ Montant type: {pattern['montant_recurrent']:.2f}‚Ç¨")
            print(f"  ‚Ä¢ Fr√©quence: {pattern['frequence_annuelle']}x/an")
            print(f"  ‚Ä¢ CA annuel estim√©: {pattern['ca_annuel_estime']:.2f}‚Ç¨")
            print(f"  ‚Ä¢ Prochaine pr√©vue: {pattern['prochaine_prevue']}")
    
    print("\n" + "=" * 40)
    print("üìä CLIENTS PONCTUELS (sur demande)")
    print("-" * 40)
    ponctuels = [c for c, p in patterns_detectes.items() if p['type_recurrence'] == "PONCTUELLE"]
    if ponctuels:
        for client in ponctuels[:10]:  # Limiter l'affichage
            pattern = patterns_detectes[client]
            print(f"‚Ä¢ {client}: {pattern['nb_factures_total']} factures, montant moyen {pattern['montant_recurrent']:.2f}‚Ç¨")
    
    # Statistiques globales
    print("\n" + "=" * 40)
    print("üìà STATISTIQUES GLOBALES")
    print("-" * 40)
    
    mensuels = [c for c, p in patterns_detectes.items() if p['type_recurrence'] == "MENSUELLE"]
    reguliers = [c for c, p in patterns_detectes.items() if p['frequence_annuelle'] > 0]
    
    ca_recurrent_annuel = sum(p['ca_annuel_estime'] for p in patterns_detectes.values())
    
    print(f"‚Ä¢ Clients mensuels: {len(mensuels)}")
    print(f"‚Ä¢ Clients r√©guliers (toutes fr√©quences): {len(reguliers)}")
    print(f"‚Ä¢ CA r√©current annuel estim√©: {ca_recurrent_annuel:,.2f}‚Ç¨")
    
    # G√©n√©rer les factures manquantes
    print("\n" + "=" * 40)
    print("‚ö†Ô∏è FACTURES EN RETARD (√† g√©n√©rer)")
    print("-" * 40)
    
    aujourd_hui = datetime.now()
    factures_en_retard = []
    
    for client, pattern in patterns_detectes.items():
        if pattern['prochaine_prevue'] != "Non d√©termin√©":
            try:
                date_prevue = datetime.strptime(pattern['prochaine_prevue'], '%Y-%m-%d')
                if date_prevue < aujourd_hui:
                    jours_retard = (aujourd_hui - date_prevue).days
                    factures_en_retard.append({
                        'client': client,
                        'montant': pattern['montant_recurrent'],
                        'date_prevue': pattern['prochaine_prevue'],
                        'jours_retard': jours_retard,
                        'type': pattern['type_recurrence']
                    })
            except:
                pass
    
    # Trier par retard d√©croissant
    factures_en_retard.sort(key=lambda x: x['jours_retard'], reverse=True)
    
    if factures_en_retard:
        montant_total_retard = sum(f['montant'] for f in factures_en_retard)
        print(f"\nüî¥ {len(factures_en_retard)} factures en retard")
        print(f"üí∞ Montant total √† facturer: {montant_total_retard:,.2f}‚Ç¨\n")
        
        for f in factures_en_retard[:10]:  # Top 10
            print(f"‚Ä¢ {f['client']:20} {f['montant']:8.2f}‚Ç¨ - Retard: {f['jours_retard']} jours ({f['type']})")
    else:
        print("\n‚úÖ Aucune facture en retard")
    
    # Sauvegarder les patterns
    with open('../patterns_recurrence.json', 'w', encoding='utf-8') as f:
        json.dump(patterns_detectes, f, indent=2, ensure_ascii=False, default=str)
        print(f"\n‚úÖ Patterns sauvegard√©s dans patterns_recurrence.json")
    
    # G√©n√©rer un planning de facturation
    print("\n" + "=" * 40)
    print("üìÖ PLANNING FACTURATION PROCHAINS 3 MOIS")
    print("-" * 40)
    
    planning = []
    for client, pattern in patterns_detectes.items():
        if pattern['frequence_annuelle'] > 0:
            # Calculer les prochaines dates
            try:
                derniere = datetime.strptime(pattern['derniere_facture']['date'][:10], '%Y-%m-%d')
            except ValueError:
                continue  # Skip si date malform√©e
            intervalle = timedelta(days=pattern['intervalle_moyen_jours'])
            
            prochaine = derniere + intervalle
            for _ in range(3):  # 3 prochaines occurrences
                if prochaine > aujourd_hui and prochaine < aujourd_hui + timedelta(days=90):
                    planning.append({
                        'date': prochaine.strftime('%Y-%m-%d'),
                        'client': client,
                        'montant': pattern['montant_recurrent'],
                        'type': pattern['type_recurrence']
                    })
                prochaine += intervalle
    
    # Trier par date
    planning.sort(key=lambda x: x['date'])
    
    # Grouper par mois
    mois_actuel = None
    total_mois = 0
    
    for p in planning:
        mois = p['date'][:7]
        if mois != mois_actuel:
            if mois_actuel:
                print(f"  TOTAL {mois_actuel}: {total_mois:,.2f}‚Ç¨")
            print(f"\n{mois}:")
            mois_actuel = mois
            total_mois = 0
        
        print(f"  {p['date']} - {p['client']:20} {p['montant']:8.2f}‚Ç¨ ({p['type']})")
        total_mois += p['montant']
    
    if mois_actuel:
        print(f"  TOTAL {mois_actuel}: {total_mois:,.2f}‚Ç¨")
    
    conn.close()
    
    print("\n" + "=" * 80)
    print("ANALYSE TERMIN√âE")
    print("=" * 80)
    
    return patterns_detectes

if __name__ == "__main__":
    patterns = analyser_patterns_recurrence()