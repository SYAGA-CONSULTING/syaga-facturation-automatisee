#!/usr/bin/env python3
"""
TABLEAU CHARGES CORRIG√â V2 - Avec vraies √©ch√©ances
- URSSAF rattrapage jusqu'au 31/12/2025
- Septembre : DOUBLE pr√™t (ancien + nouveau)
- Nouveau pr√™t 6 mois √† partir de septembre
"""

from datetime import datetime

def afficher_mois(titre, charges_dict, salaire_net=3000):
    """Affiche les charges pour un mois donn√©"""
    print(f"\n{'='*80}")
    print(f"  {titre}")
    print('='*80)
    
    total = 0
    for categorie, items in charges_dict.items():
        print(f"\n  {categorie}")
        print("  " + "-"*60)
        for nom, montant, note in items:
            if isinstance(montant, (int, float)):
                if note:
                    print(f"  {nom:<35} {montant:>8,.0f}‚Ç¨   {note}")
                else:
                    print(f"  {nom:<35} {montant:>8,.0f}‚Ç¨")
                total += montant
    
    print("\n  " + "="*60)
    print(f"  {'TOTAL CHARGES':<35} {total:>8,.0f}‚Ç¨")
    
    # Avec salaire
    charges_tns = int(salaire_net * 0.682)  # 68.2% total TNS
    cout_salaire = salaire_net + charges_tns
    total_avec_salaire = total + cout_salaire
    
    print(f"  {'Salaire net + charges TNS':<35} {cout_salaire:>8,.0f}‚Ç¨")
    print(f"  {'CA MENSUEL N√âCESSAIRE':<35} {total_avec_salaire:>8,.0f}‚Ç¨")
    
    return total, total_avec_salaire

def main():
    print("\n" + "="*80)
    print("       üìä √âVOLUTION CHARGES MENSUELLES - SYAGA CONSULTING")
    print("           Mise √† jour: " + datetime.now().strftime('%d/%m/%Y %H:%M'))
    print("="*80)
    
    # CHARGES AO√õT 2025 (situation actuelle)
    charges_aout = {
        "SALAIRES & CHARGES": [
            ("URSSAF (avec rattrapage)", 3700, "jusqu'au 31/12/2025"),
            ("Romain BASTIEN", 2650, ""),
            ("Hugo JOUCLA", 2250, ""),
        ],
        "IMMOBILIER": [
            ("Loyer QSSP", 900, ""),
            ("Loyer CAGNES", 100, ""),
        ],
        "FINANCEMENTS": [
            ("Pr√™t Riverbank", 1618, "Fin 31/08"),
            ("DIAC", 586, ""),
        ],
        "SERVICES & ASSURANCES": [
            ("VillaData", 1260, ""),
            ("SwissLife (total)", 690, "132+507+51"),
            ("Hiscox RC Pro", 120, ""),
        ],
        "T√âL√âCOMS": [
            ("Orange", 110, ""),
            ("Free (Mobile + Box)", 75, "30+45"),
            ("OVH", 8, ""),
        ],
        "AUTRES": [
            ("DOUGS comptable", 340, ""),
            ("Essence", 103, ""),
            ("Microsoft 365", 24, ""),
            ("Roole", 15, ""),
        ],
    }
    
    # CHARGES SEPTEMBRE 2025 (DOUBLE PR√äT!)
    charges_septembre = {
        "SALAIRES & CHARGES": [
            ("URSSAF (avec rattrapage)", 3700, "‚ö†Ô∏è jusqu'au 31/12"),
            ("Romain BASTIEN", 2650, ""),
            ("Hugo JOUCLA", 2250, ""),
        ],
        "IMMOBILIER": [
            ("Loyer QSSP", 900, ""),
            ("Loyer CAGNES", 100, ""),
        ],
        "FINANCEMENTS": [
            ("Pr√™t Riverbank (ancien)", 1618, "‚ùå DERNIER MOIS"),
            ("Nouveau pr√™t (6 mois)", 1700, "üÜï NOUVEAU"),
            ("DIAC", 586, ""),
        ],
        "SERVICES & ASSURANCES": [
            ("VillaData", 1260, ""),
            ("SwissLife (total)", 690, ""),
            ("Hiscox RC Pro", 120, ""),
        ],
        "T√âL√âCOMS": [
            ("Orange", 110, ""),
            ("Free (Mobile + Box)", 75, ""),
            ("OVH", 8, ""),
        ],
        "AUTRES": [
            ("DOUGS comptable", 340, ""),
            ("Essence", 103, ""),
            ("Microsoft 365", 24, ""),
            ("Roole", 15, ""),
        ],
    }
    
    # CHARGES OCTOBRE-D√âCEMBRE 2025
    charges_oct_dec = {
        "SALAIRES & CHARGES": [
            ("URSSAF (avec rattrapage)", 3700, "‚ö†Ô∏è jusqu'au 31/12"),
            ("Romain BASTIEN", 2650, ""),
            ("Hugo JOUCLA", 2250, ""),
        ],
        "IMMOBILIER": [
            ("Loyer QSSP", 900, ""),
            ("Loyer CAGNES", 100, ""),
        ],
        "FINANCEMENTS": [
            ("Nouveau pr√™t (6 mois)", 1700, "Oct‚ÜíF√©v 2026"),
            ("DIAC", 586, ""),
        ],
        "SERVICES & ASSURANCES": [
            ("VillaData", 1260, ""),
            ("SwissLife (total)", 690, ""),
            ("Hiscox RC Pro", 120, ""),
        ],
        "T√âL√âCOMS": [
            ("Orange", 110, ""),
            ("Free (Mobile + Box)", 75, ""),
            ("OVH", 8, ""),
        ],
        "AUTRES": [
            ("DOUGS comptable", 340, ""),
            ("Essence", 103, ""),
            ("Microsoft 365", 24, ""),
            ("Roole", 15, ""),
        ],
    }
    
    # CHARGES JANVIER 2026 (apr√®s fin rattrapage URSSAF)
    charges_janvier = {
        "SALAIRES & CHARGES": [
            ("URSSAF (normal)", 2591, "‚úÖ FIN RATTRAPAGE"),
            ("Romain BASTIEN", 2650, ""),
            ("Hugo JOUCLA", 2250, ""),
        ],
        "IMMOBILIER": [
            ("Loyer QSSP", 900, ""),
            ("Loyer CAGNES", 100, ""),
        ],
        "FINANCEMENTS": [
            ("Nouveau pr√™t", 1700, "Jusqu'√† f√©vrier"),
            ("DIAC", 586, ""),
        ],
        "SERVICES & ASSURANCES": [
            ("VillaData", 1260, ""),
            ("SwissLife (total)", 690, ""),
            ("Hiscox RC Pro", 120, ""),
        ],
        "T√âL√âCOMS": [
            ("Orange", 110, ""),
            ("Free (Mobile + Box)", 75, ""),
            ("OVH", 8, ""),
        ],
        "AUTRES": [
            ("DOUGS comptable", 340, ""),
            ("Essence", 103, ""),
            ("Microsoft 365", 24, ""),
            ("Roole", 15, ""),
        ],
    }
    
    # CHARGES MARS 2026 (apr√®s fin nouveau pr√™t)
    charges_mars = {
        "SALAIRES & CHARGES": [
            ("URSSAF (normal)", 2591, ""),
            ("Romain BASTIEN", 2650, ""),
            ("Hugo JOUCLA", 2250, ""),
        ],
        "IMMOBILIER": [
            ("Loyer QSSP", 900, ""),
            ("Loyer CAGNES", 100, ""),
        ],
        "FINANCEMENTS": [
            ("DIAC", 586, "Seul cr√©dit restant"),
        ],
        "SERVICES & ASSURANCES": [
            ("VillaData", 1260, ""),
            ("SwissLife (total)", 690, ""),
            ("Hiscox RC Pro", 120, ""),
        ],
        "T√âL√âCOMS": [
            ("Orange", 110, ""),
            ("Free (Mobile + Box)", 75, ""),
            ("OVH", 8, ""),
        ],
        "AUTRES": [
            ("DOUGS comptable", 340, ""),
            ("Essence", 103, ""),
            ("Microsoft 365", 24, ""),
            ("Roole", 15, ""),
        ],
    }
    
    # Calculer et afficher chaque p√©riode
    total_aout, besoin_aout = afficher_mois("üìÖ AO√õT 2025 - SITUATION ACTUELLE", charges_aout)
    total_sept, besoin_sept = afficher_mois("‚ö†Ô∏è SEPTEMBRE 2025 - DOUBLE PR√äT!", charges_septembre)
    total_oct, besoin_oct = afficher_mois("üìÖ OCTOBRE-D√âCEMBRE 2025", charges_oct_dec)
    total_jan, besoin_jan = afficher_mois("üéØ JANVIER 2026 - FIN RATTRAPAGE URSSAF", charges_janvier)
    total_mars, besoin_mars = afficher_mois("‚úÖ MARS 2026 - SITUATION OPTIMALE", charges_mars)
    
    # SYNTH√àSE
    print("\n" + "="*80)
    print("                    üìä SYNTH√àSE √âVOLUTION")
    print("="*80)
    
    print(f"""
    √âVOLUTION DU BESOIN EN CA MENSUEL:
    
    üìÖ Ao√ªt 2025      : {besoin_aout:>8,}‚Ç¨  (baseline)
    ‚ö†Ô∏è Septembre 2025 : {besoin_sept:>8,}‚Ç¨  (+{besoin_sept-besoin_aout:,}‚Ç¨ double pr√™t)
    üìÖ Oct-D√©c 2025   : {besoin_oct:>8,}‚Ç¨  (nouveau pr√™t seul)
    üéØ Janvier 2026   : {besoin_jan:>8,}‚Ç¨  (-1,109‚Ç¨ fin rattrapage)
    ‚úÖ Mars 2026      : {besoin_mars:>8,}‚Ç¨  (-1,700‚Ç¨ fin pr√™t)
    
    POINTS CRITIQUES:
    
    ‚ö†Ô∏è SEPTEMBRE 2025 - MOIS DIFFICILE
       ‚Ä¢ Double pr√™t : 1,618‚Ç¨ + 1,700‚Ç¨ = 3,318‚Ç¨
       ‚Ä¢ Besoin exceptionnel : {besoin_sept:,}‚Ç¨
       ‚Ä¢ +{((besoin_sept-besoin_aout)/besoin_aout)*100:.1f}% vs ao√ªt
    
    üìâ R√âDUCTIONS PROGRESSIVES:
       ‚Ä¢ Janvier 2026 : -1,109‚Ç¨/mois (URSSAF normal)
       ‚Ä¢ Mars 2026 : -1,700‚Ç¨/mois (fin nouveau pr√™t)
       ‚Ä¢ Total √©conomies : -2,809‚Ç¨/mois (-{((besoin_aout-besoin_mars)/besoin_aout)*100:.1f}%)
    
    üí° BESOIN DE TR√âSORERIE SEPTEMBRE:
       ‚Ä¢ Pr√©voir {besoin_sept-besoin_aout:,}‚Ç¨ suppl√©mentaires
       ‚Ä¢ Ou n√©gocier d√©calage d√©but nouveau pr√™t
    """)
    
    return besoin_aout, besoin_sept, besoin_mars

if __name__ == "__main__":
    aout, sept, mars = main()
    
    print("\n" + "="*80)
    print("üí∞ STRAT√âGIE RECOMMAND√âE")
    print("="*80)
    print(f"""
    1. G√âRER LE PIC DE SEPTEMBRE:
       ‚Ä¢ Facturer juillet-ao√ªt rapidement (15,460‚Ç¨ identifi√©s)
       ‚Ä¢ N√©gocier acompte PHARMABEST si possible
       ‚Ä¢ Reporter d√©but nouveau pr√™t √† octobre si possible
    
    2. OPPORTUNIT√âS COURT TERME:
       ‚Ä¢ UAI Phase 1 : 21k‚Ç¨ (d√©marrage septembre)
       ‚Ä¢ PHARMABEST : 85k‚Ç¨ (RDV rentr√©e)
       ‚Ä¢ LAA GPU : 4.5k‚Ç¨ (apr√®s test 150‚Ç¨)
    
    3. OBJECTIF FIN 2025:
       ‚Ä¢ Stabiliser √† {besoin_mars:,}‚Ç¨/mois
       ‚Ä¢ Soit {besoin_mars/22:.0f}‚Ç¨/jour ouvr√©
       ‚Ä¢ Ou {besoin_mars/4:.0f}‚Ç¨/semaine
    """)
    
    print("\n‚úÖ Analyse termin√©e et sauvegard√©e")